{"ast":null,"code":"import _regeneratorRuntime from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { openDB, deleteDB } from 'idb';\nimport '../_version.js';\nvar DB_NAME = 'workbox-expiration';\nvar CACHE_OBJECT_STORE = 'cache-entries';\n\nvar normalizeURL = function normalizeURL(unNormalizedUrl) {\n  var url = new URL(unNormalizedUrl, location.href);\n  url.hash = '';\n  return url.href;\n};\n/**\n * Returns the timestamp model.\n *\n * @private\n */\n\n\nvar CacheTimestampsModel = /*#__PURE__*/function () {\n  /**\n   *\n   * @param {string} cacheName\n   *\n   * @private\n   */\n  function CacheTimestampsModel(cacheName) {\n    _classCallCheck(this, CacheTimestampsModel);\n\n    this._db = null;\n    this._cacheName = cacheName;\n  }\n  /**\n   * Performs an upgrade of indexedDB.\n   *\n   * @param {IDBPDatabase<CacheDbSchema>} db\n   *\n   * @private\n   */\n\n\n  _createClass(CacheTimestampsModel, [{\n    key: \"_upgradeDb\",\n    value: function _upgradeDb(db) {\n      // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we\n      // have to use the `id` keyPath here and create our own values (a\n      // concatenation of `url + cacheName`) instead of simply using\n      // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.\n      var objStore = db.createObjectStore(CACHE_OBJECT_STORE, {\n        keyPath: 'id'\n      }); // TODO(philipwalton): once we don't have to support EdgeHTML, we can\n      // create a single index with the keyPath `['cacheName', 'timestamp']`\n      // instead of doing both these indexes.\n\n      objStore.createIndex('cacheName', 'cacheName', {\n        unique: false\n      });\n      objStore.createIndex('timestamp', 'timestamp', {\n        unique: false\n      });\n    }\n    /**\n     * Performs an upgrade of indexedDB and deletes deprecated DBs.\n     *\n     * @param {IDBPDatabase<CacheDbSchema>} db\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_upgradeDbAndDeleteOldDbs\",\n    value: function _upgradeDbAndDeleteOldDbs(db) {\n      this._upgradeDb(db);\n\n      if (this._cacheName) {\n        void deleteDB(this._cacheName);\n      }\n    }\n    /**\n     * @param {string} url\n     * @param {number} timestamp\n     *\n     * @private\n     */\n\n  }, {\n    key: \"setTimestamp\",\n    value: function () {\n      var _setTimestamp = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url, timestamp) {\n        var entry, db, tx;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                url = normalizeURL(url);\n                entry = {\n                  url: url,\n                  timestamp: timestamp,\n                  cacheName: this._cacheName,\n                  // Creating an ID from the URL and cache name won't be necessary once\n                  // Edge switches to Chromium and all browsers we support work with\n                  // array keyPaths.\n                  id: this._getId(url)\n                };\n                _context.next = 4;\n                return this.getDb();\n\n              case 4:\n                db = _context.sent;\n                tx = db.transaction(CACHE_OBJECT_STORE, 'readwrite', {\n                  durability: 'relaxed'\n                });\n                _context.next = 8;\n                return tx.store.put(entry);\n\n              case 8:\n                _context.next = 10;\n                return tx.done;\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function setTimestamp(_x, _x2) {\n        return _setTimestamp.apply(this, arguments);\n      }\n\n      return setTimestamp;\n    }()\n    /**\n     * Returns the timestamp stored for a given URL.\n     *\n     * @param {string} url\n     * @return {number | undefined}\n     *\n     * @private\n     */\n\n  }, {\n    key: \"getTimestamp\",\n    value: function () {\n      var _getTimestamp = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(url) {\n        var db, entry;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.getDb();\n\n              case 2:\n                db = _context2.sent;\n                _context2.next = 5;\n                return db.get(CACHE_OBJECT_STORE, this._getId(url));\n\n              case 5:\n                entry = _context2.sent;\n                return _context2.abrupt(\"return\", entry === null || entry === void 0 ? void 0 : entry.timestamp);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getTimestamp(_x3) {\n        return _getTimestamp.apply(this, arguments);\n      }\n\n      return getTimestamp;\n    }()\n    /**\n     * Iterates through all the entries in the object store (from newest to\n     * oldest) and removes entries once either `maxCount` is reached or the\n     * entry's timestamp is less than `minTimestamp`.\n     *\n     * @param {number} minTimestamp\n     * @param {number} maxCount\n     * @return {Array<string>}\n     *\n     * @private\n     */\n\n  }, {\n    key: \"expireEntries\",\n    value: function () {\n      var _expireEntries = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(minTimestamp, maxCount) {\n        var db, cursor, entriesToDelete, entriesNotDeletedCount, result, urlsDeleted, _i, _entriesToDelete, entry;\n\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.getDb();\n\n              case 2:\n                db = _context3.sent;\n                _context3.next = 5;\n                return db.transaction(CACHE_OBJECT_STORE).store.index('timestamp').openCursor(null, 'prev');\n\n              case 5:\n                cursor = _context3.sent;\n                entriesToDelete = [];\n                entriesNotDeletedCount = 0;\n\n              case 8:\n                if (!cursor) {\n                  _context3.next = 16;\n                  break;\n                }\n\n                result = cursor.value; // TODO(philipwalton): once we can use a multi-key index, we\n                // won't have to check `cacheName` here.\n\n                if (result.cacheName === this._cacheName) {\n                  // Delete an entry if it's older than the max age or\n                  // if we already have the max number allowed.\n                  if (minTimestamp && result.timestamp < minTimestamp || maxCount && entriesNotDeletedCount >= maxCount) {\n                    // TODO(philipwalton): we should be able to delete the\n                    // entry right here, but doing so causes an iteration\n                    // bug in Safari stable (fixed in TP). Instead we can\n                    // store the keys of the entries to delete, and then\n                    // delete the separate transactions.\n                    // https://github.com/GoogleChrome/workbox/issues/1978\n                    // cursor.delete();\n                    // We only need to return the URL, not the whole entry.\n                    entriesToDelete.push(cursor.value);\n                  } else {\n                    entriesNotDeletedCount++;\n                  }\n                }\n\n                _context3.next = 13;\n                return cursor.continue();\n\n              case 13:\n                cursor = _context3.sent;\n                _context3.next = 8;\n                break;\n\n              case 16:\n                // TODO(philipwalton): once the Safari bug in the following issue is fixed,\n                // we should be able to remove this loop and do the entry deletion in the\n                // cursor loop above:\n                // https://github.com/GoogleChrome/workbox/issues/1978\n                urlsDeleted = [];\n                _i = 0, _entriesToDelete = entriesToDelete;\n\n              case 18:\n                if (!(_i < _entriesToDelete.length)) {\n                  _context3.next = 26;\n                  break;\n                }\n\n                entry = _entriesToDelete[_i];\n                _context3.next = 22;\n                return db.delete(CACHE_OBJECT_STORE, entry.id);\n\n              case 22:\n                urlsDeleted.push(entry.url);\n\n              case 23:\n                _i++;\n                _context3.next = 18;\n                break;\n\n              case 26:\n                return _context3.abrupt(\"return\", urlsDeleted);\n\n              case 27:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function expireEntries(_x4, _x5) {\n        return _expireEntries.apply(this, arguments);\n      }\n\n      return expireEntries;\n    }()\n    /**\n     * Takes a URL and returns an ID that will be unique in the object store.\n     *\n     * @param {string} url\n     * @return {string}\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_getId\",\n    value: function _getId(url) {\n      // Creating an ID from the URL and cache name won't be necessary once\n      // Edge switches to Chromium and all browsers we support work with\n      // array keyPaths.\n      return this._cacheName + '|' + normalizeURL(url);\n    }\n    /**\n     * Returns an open connection to the database.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"getDb\",\n    value: function () {\n      var _getDb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (this._db) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                _context4.next = 3;\n                return openDB(DB_NAME, 1, {\n                  upgrade: this._upgradeDbAndDeleteOldDbs.bind(this)\n                });\n\n              case 3:\n                this._db = _context4.sent;\n\n              case 4:\n                return _context4.abrupt(\"return\", this._db);\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getDb() {\n        return _getDb.apply(this, arguments);\n      }\n\n      return getDb;\n    }()\n  }]);\n\n  return CacheTimestampsModel;\n}();\n\nexport { CacheTimestampsModel };","map":{"version":3,"names":["openDB","deleteDB","DB_NAME","CACHE_OBJECT_STORE","normalizeURL","unNormalizedUrl","url","URL","location","href","hash","CacheTimestampsModel","cacheName","_db","_cacheName","db","objStore","createObjectStore","keyPath","createIndex","unique","_upgradeDb","timestamp","entry","id","_getId","getDb","tx","transaction","durability","store","put","done","get","minTimestamp","maxCount","index","openCursor","cursor","entriesToDelete","entriesNotDeletedCount","result","value","push","continue","urlsDeleted","delete","upgrade","_upgradeDbAndDeleteOldDbs","bind"],"sources":["/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/workbox-expiration/models/CacheTimestampsModel.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { openDB, deleteDB } from 'idb';\nimport '../_version.js';\nconst DB_NAME = 'workbox-expiration';\nconst CACHE_OBJECT_STORE = 'cache-entries';\nconst normalizeURL = (unNormalizedUrl) => {\n    const url = new URL(unNormalizedUrl, location.href);\n    url.hash = '';\n    return url.href;\n};\n/**\n * Returns the timestamp model.\n *\n * @private\n */\nclass CacheTimestampsModel {\n    /**\n     *\n     * @param {string} cacheName\n     *\n     * @private\n     */\n    constructor(cacheName) {\n        this._db = null;\n        this._cacheName = cacheName;\n    }\n    /**\n     * Performs an upgrade of indexedDB.\n     *\n     * @param {IDBPDatabase<CacheDbSchema>} db\n     *\n     * @private\n     */\n    _upgradeDb(db) {\n        // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we\n        // have to use the `id` keyPath here and create our own values (a\n        // concatenation of `url + cacheName`) instead of simply using\n        // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.\n        const objStore = db.createObjectStore(CACHE_OBJECT_STORE, { keyPath: 'id' });\n        // TODO(philipwalton): once we don't have to support EdgeHTML, we can\n        // create a single index with the keyPath `['cacheName', 'timestamp']`\n        // instead of doing both these indexes.\n        objStore.createIndex('cacheName', 'cacheName', { unique: false });\n        objStore.createIndex('timestamp', 'timestamp', { unique: false });\n    }\n    /**\n     * Performs an upgrade of indexedDB and deletes deprecated DBs.\n     *\n     * @param {IDBPDatabase<CacheDbSchema>} db\n     *\n     * @private\n     */\n    _upgradeDbAndDeleteOldDbs(db) {\n        this._upgradeDb(db);\n        if (this._cacheName) {\n            void deleteDB(this._cacheName);\n        }\n    }\n    /**\n     * @param {string} url\n     * @param {number} timestamp\n     *\n     * @private\n     */\n    async setTimestamp(url, timestamp) {\n        url = normalizeURL(url);\n        const entry = {\n            url,\n            timestamp,\n            cacheName: this._cacheName,\n            // Creating an ID from the URL and cache name won't be necessary once\n            // Edge switches to Chromium and all browsers we support work with\n            // array keyPaths.\n            id: this._getId(url),\n        };\n        const db = await this.getDb();\n        const tx = db.transaction(CACHE_OBJECT_STORE, 'readwrite', {\n            durability: 'relaxed',\n        });\n        await tx.store.put(entry);\n        await tx.done;\n    }\n    /**\n     * Returns the timestamp stored for a given URL.\n     *\n     * @param {string} url\n     * @return {number | undefined}\n     *\n     * @private\n     */\n    async getTimestamp(url) {\n        const db = await this.getDb();\n        const entry = await db.get(CACHE_OBJECT_STORE, this._getId(url));\n        return entry === null || entry === void 0 ? void 0 : entry.timestamp;\n    }\n    /**\n     * Iterates through all the entries in the object store (from newest to\n     * oldest) and removes entries once either `maxCount` is reached or the\n     * entry's timestamp is less than `minTimestamp`.\n     *\n     * @param {number} minTimestamp\n     * @param {number} maxCount\n     * @return {Array<string>}\n     *\n     * @private\n     */\n    async expireEntries(minTimestamp, maxCount) {\n        const db = await this.getDb();\n        let cursor = await db\n            .transaction(CACHE_OBJECT_STORE)\n            .store.index('timestamp')\n            .openCursor(null, 'prev');\n        const entriesToDelete = [];\n        let entriesNotDeletedCount = 0;\n        while (cursor) {\n            const result = cursor.value;\n            // TODO(philipwalton): once we can use a multi-key index, we\n            // won't have to check `cacheName` here.\n            if (result.cacheName === this._cacheName) {\n                // Delete an entry if it's older than the max age or\n                // if we already have the max number allowed.\n                if ((minTimestamp && result.timestamp < minTimestamp) ||\n                    (maxCount && entriesNotDeletedCount >= maxCount)) {\n                    // TODO(philipwalton): we should be able to delete the\n                    // entry right here, but doing so causes an iteration\n                    // bug in Safari stable (fixed in TP). Instead we can\n                    // store the keys of the entries to delete, and then\n                    // delete the separate transactions.\n                    // https://github.com/GoogleChrome/workbox/issues/1978\n                    // cursor.delete();\n                    // We only need to return the URL, not the whole entry.\n                    entriesToDelete.push(cursor.value);\n                }\n                else {\n                    entriesNotDeletedCount++;\n                }\n            }\n            cursor = await cursor.continue();\n        }\n        // TODO(philipwalton): once the Safari bug in the following issue is fixed,\n        // we should be able to remove this loop and do the entry deletion in the\n        // cursor loop above:\n        // https://github.com/GoogleChrome/workbox/issues/1978\n        const urlsDeleted = [];\n        for (const entry of entriesToDelete) {\n            await db.delete(CACHE_OBJECT_STORE, entry.id);\n            urlsDeleted.push(entry.url);\n        }\n        return urlsDeleted;\n    }\n    /**\n     * Takes a URL and returns an ID that will be unique in the object store.\n     *\n     * @param {string} url\n     * @return {string}\n     *\n     * @private\n     */\n    _getId(url) {\n        // Creating an ID from the URL and cache name won't be necessary once\n        // Edge switches to Chromium and all browsers we support work with\n        // array keyPaths.\n        return this._cacheName + '|' + normalizeURL(url);\n    }\n    /**\n     * Returns an open connection to the database.\n     *\n     * @private\n     */\n    async getDb() {\n        if (!this._db) {\n            this._db = await openDB(DB_NAME, 1, {\n                upgrade: this._upgradeDbAndDeleteOldDbs.bind(this),\n            });\n        }\n        return this._db;\n    }\n}\nexport { CacheTimestampsModel };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}