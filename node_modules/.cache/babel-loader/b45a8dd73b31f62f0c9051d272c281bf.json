{"ast":null,"code":"import _regeneratorRuntime from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a [cache-first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#cache-first-falling-back-to-network)\n * request strategy.\n *\n * A cache first strategy is useful for assets that have been revisioned,\n * such as URLs like `/styles/example.a8f5f1.css`, since they\n * can be cached for long periods of time.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\n\nvar CacheFirst = /*#__PURE__*/function (_Strategy) {\n  _inherits(CacheFirst, _Strategy);\n\n  var _super = _createSuper(CacheFirst);\n\n  function CacheFirst() {\n    _classCallCheck(this, CacheFirst);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(CacheFirst, [{\n    key: \"_handle\",\n    value:\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    function () {\n      var _handle2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(request, handler) {\n        var logs, response, error, _iterator, _step, log;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                logs = [];\n\n                if (process.env.NODE_ENV !== 'production') {\n                  assert.isInstance(request, Request, {\n                    moduleName: 'workbox-strategies',\n                    className: this.constructor.name,\n                    funcName: 'makeRequest',\n                    paramName: 'request'\n                  });\n                }\n\n                _context.next = 4;\n                return handler.cacheMatch(request);\n\n              case 4:\n                response = _context.sent;\n                error = undefined;\n\n                if (response) {\n                  _context.next = 20;\n                  break;\n                }\n\n                if (process.env.NODE_ENV !== 'production') {\n                  logs.push(\"No response found in the '\".concat(this.cacheName, \"' cache. \") + \"Will respond with a network request.\");\n                }\n\n                _context.prev = 8;\n                _context.next = 11;\n                return handler.fetchAndCachePut(request);\n\n              case 11:\n                response = _context.sent;\n                _context.next = 17;\n                break;\n\n              case 14:\n                _context.prev = 14;\n                _context.t0 = _context[\"catch\"](8);\n\n                if (_context.t0 instanceof Error) {\n                  error = _context.t0;\n                }\n\n              case 17:\n                if (process.env.NODE_ENV !== 'production') {\n                  if (response) {\n                    logs.push(\"Got response from network.\");\n                  } else {\n                    logs.push(\"Unable to get a response from the network.\");\n                  }\n                }\n\n                _context.next = 21;\n                break;\n\n              case 20:\n                if (process.env.NODE_ENV !== 'production') {\n                  logs.push(\"Found a cached response in the '\".concat(this.cacheName, \"' cache.\"));\n                }\n\n              case 21:\n                if (process.env.NODE_ENV !== 'production') {\n                  logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n                  _iterator = _createForOfIteratorHelper(logs);\n\n                  try {\n                    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                      log = _step.value;\n                      logger.log(log);\n                    }\n                  } catch (err) {\n                    _iterator.e(err);\n                  } finally {\n                    _iterator.f();\n                  }\n\n                  messages.printFinalResponse(response);\n                  logger.groupEnd();\n                }\n\n                if (response) {\n                  _context.next = 24;\n                  break;\n                }\n\n                throw new WorkboxError('no-response', {\n                  url: request.url,\n                  error: error\n                });\n\n              case 24:\n                return _context.abrupt(\"return\", response);\n\n              case 25:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[8, 14]]);\n      }));\n\n      function _handle(_x, _x2) {\n        return _handle2.apply(this, arguments);\n      }\n\n      return _handle;\n    }()\n  }]);\n\n  return CacheFirst;\n}(Strategy);\n\nexport { CacheFirst };","map":{"version":3,"names":["assert","logger","WorkboxError","Strategy","messages","CacheFirst","request","handler","logs","process","env","NODE_ENV","isInstance","Request","moduleName","className","constructor","name","funcName","paramName","cacheMatch","response","error","undefined","push","cacheName","fetchAndCachePut","Error","groupCollapsed","strategyStart","log","printFinalResponse","groupEnd","url"],"sources":["/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/workbox-strategies/CacheFirst.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a [cache-first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#cache-first-falling-back-to-network)\n * request strategy.\n *\n * A cache first strategy is useful for assets that have been revisioned,\n * such as URLs like `/styles/example.a8f5f1.css`, since they\n * can be cached for long periods of time.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass CacheFirst extends Strategy {\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'makeRequest',\n                paramName: 'request',\n            });\n        }\n        let response = await handler.cacheMatch(request);\n        let error = undefined;\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this.cacheName}' cache. ` +\n                    `Will respond with a network request.`);\n            }\n            try {\n                response = await handler.fetchAndCachePut(request);\n            }\n            catch (err) {\n                if (err instanceof Error) {\n                    error = err;\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Got response from network.`);\n                }\n                else {\n                    logs.push(`Unable to get a response from the network.`);\n                }\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this.cacheName}' cache.`);\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { CacheFirst };\n"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,iCAAvB;AACA,SAASC,MAAT,QAAuB,iCAAvB;AACA,SAASC,YAAT,QAA6B,uCAA7B;AACA,SAASC,QAAT,QAAyB,eAAzB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAO,eAAP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,U;;;;;;;;;;;;;;IACF;AACJ;AACA;AACA;AACA;AACA;AACA;;gFACI,iBAAcC,OAAd,EAAuBC,OAAvB;QAAA;;QAAA;UAAA;YAAA;cAAA;gBACUC,IADV,GACiB,EADjB;;gBAEI,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;kBACvCX,MAAM,CAACY,UAAP,CAAkBN,OAAlB,EAA2BO,OAA3B,EAAoC;oBAChCC,UAAU,EAAE,oBADoB;oBAEhCC,SAAS,EAAE,KAAKC,WAAL,CAAiBC,IAFI;oBAGhCC,QAAQ,EAAE,aAHsB;oBAIhCC,SAAS,EAAE;kBAJqB,CAApC;gBAMH;;gBATL;gBAAA,OAUyBZ,OAAO,CAACa,UAAR,CAAmBd,OAAnB,CAVzB;;cAAA;gBAUQe,QAVR;gBAWQC,KAXR,GAWgBC,SAXhB;;gBAAA,IAYSF,QAZT;kBAAA;kBAAA;gBAAA;;gBAaQ,IAAIZ,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;kBACvCH,IAAI,CAACgB,IAAL,CAAU,oCAA6B,KAAKC,SAAlC,uDAAV;gBAEH;;gBAhBT;gBAAA;gBAAA,OAkB6BlB,OAAO,CAACmB,gBAAR,CAAyBpB,OAAzB,CAlB7B;;cAAA;gBAkBYe,QAlBZ;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA;;gBAqBY,IAAI,uBAAeM,KAAnB,EAA0B;kBACtBL,KAAK,cAAL;gBACH;;cAvBb;gBAyBQ,IAAIb,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;kBACvC,IAAIU,QAAJ,EAAc;oBACVb,IAAI,CAACgB,IAAL;kBACH,CAFD,MAGK;oBACDhB,IAAI,CAACgB,IAAL;kBACH;gBACJ;;gBAhCT;gBAAA;;cAAA;gBAmCQ,IAAIf,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;kBACvCH,IAAI,CAACgB,IAAL,2CAA6C,KAAKC,SAAlD;gBACH;;cArCT;gBAuCI,IAAIhB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;kBACvCV,MAAM,CAAC2B,cAAP,CAAsBxB,QAAQ,CAACyB,aAAT,CAAuB,KAAKb,WAAL,CAAiBC,IAAxC,EAA8CX,OAA9C,CAAtB;kBADuC,uCAErBE,IAFqB;;kBAAA;oBAEvC,oDAAwB;sBAAbsB,GAAa;sBACpB7B,MAAM,CAAC6B,GAAP,CAAWA,GAAX;oBACH;kBAJsC;oBAAA;kBAAA;oBAAA;kBAAA;;kBAKvC1B,QAAQ,CAAC2B,kBAAT,CAA4BV,QAA5B;kBACApB,MAAM,CAAC+B,QAAP;gBACH;;gBA9CL,IA+CSX,QA/CT;kBAAA;kBAAA;gBAAA;;gBAAA,MAgDc,IAAInB,YAAJ,CAAiB,aAAjB,EAAgC;kBAAE+B,GAAG,EAAE3B,OAAO,CAAC2B,GAAf;kBAAoBX,KAAK,EAALA;gBAApB,CAAhC,CAhDd;;cAAA;gBAAA,iCAkDWD,QAlDX;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;;;;EARqBlB,Q;;AA6DzB,SAASE,UAAT"},"metadata":{},"sourceType":"module"}