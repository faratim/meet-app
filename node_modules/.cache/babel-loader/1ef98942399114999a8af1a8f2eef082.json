{"ast":null,"code":"import _regeneratorRuntime from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark(generateURLVariations);\n\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\nimport '../_version.js';\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof workbox-precaching\n */\n\nexport function generateURLVariations(url) {\n  var _ref,\n      _ref$ignoreURLParamet,\n      ignoreURLParametersMatching,\n      _ref$directoryIndex,\n      directoryIndex,\n      _ref$cleanURLs,\n      cleanURLs,\n      urlManipulation,\n      urlObject,\n      urlWithoutIgnoredParams,\n      directoryURL,\n      cleanURL,\n      additionalURLs,\n      _iterator,\n      _step,\n      urlToAttempt,\n      _args = arguments;\n\n  return _regeneratorRuntime().wrap(function generateURLVariations$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _ref = _args.length > 1 && _args[1] !== undefined ? _args[1] : {}, _ref$ignoreURLParamet = _ref.ignoreURLParametersMatching, ignoreURLParametersMatching = _ref$ignoreURLParamet === void 0 ? [/^utm_/, /^fbclid$/] : _ref$ignoreURLParamet, _ref$directoryIndex = _ref.directoryIndex, directoryIndex = _ref$directoryIndex === void 0 ? 'index.html' : _ref$directoryIndex, _ref$cleanURLs = _ref.cleanURLs, cleanURLs = _ref$cleanURLs === void 0 ? true : _ref$cleanURLs, urlManipulation = _ref.urlManipulation;\n          urlObject = new URL(url, location.href);\n          urlObject.hash = '';\n          _context.next = 5;\n          return urlObject.href;\n\n        case 5:\n          urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n          _context.next = 8;\n          return urlWithoutIgnoredParams.href;\n\n        case 8:\n          if (!(directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/'))) {\n            _context.next = 13;\n            break;\n          }\n\n          directoryURL = new URL(urlWithoutIgnoredParams.href);\n          directoryURL.pathname += directoryIndex;\n          _context.next = 13;\n          return directoryURL.href;\n\n        case 13:\n          if (!cleanURLs) {\n            _context.next = 18;\n            break;\n          }\n\n          cleanURL = new URL(urlWithoutIgnoredParams.href);\n          cleanURL.pathname += '.html';\n          _context.next = 18;\n          return cleanURL.href;\n\n        case 18:\n          if (!urlManipulation) {\n            _context.next = 37;\n            break;\n          }\n\n          additionalURLs = urlManipulation({\n            url: urlObject\n          });\n          _iterator = _createForOfIteratorHelper(additionalURLs);\n          _context.prev = 21;\n\n          _iterator.s();\n\n        case 23:\n          if ((_step = _iterator.n()).done) {\n            _context.next = 29;\n            break;\n          }\n\n          urlToAttempt = _step.value;\n          _context.next = 27;\n          return urlToAttempt.href;\n\n        case 27:\n          _context.next = 23;\n          break;\n\n        case 29:\n          _context.next = 34;\n          break;\n\n        case 31:\n          _context.prev = 31;\n          _context.t0 = _context[\"catch\"](21);\n\n          _iterator.e(_context.t0);\n\n        case 34:\n          _context.prev = 34;\n\n          _iterator.f();\n\n          return _context.finish(34);\n\n        case 37:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[21, 31, 34, 37]]);\n}","map":{"version":3,"names":["generateURLVariations","removeIgnoredSearchParams","url","ignoreURLParametersMatching","directoryIndex","cleanURLs","urlManipulation","urlObject","URL","location","href","hash","urlWithoutIgnoredParams","pathname","endsWith","directoryURL","cleanURL","additionalURLs","urlToAttempt"],"sources":["/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/workbox-precaching/utils/generateURLVariations.js"],"sourcesContent":["/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\nimport '../_version.js';\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function* generateURLVariations(url, { ignoreURLParametersMatching = [/^utm_/, /^fbclid$/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) {\n    const urlObject = new URL(url, location.href);\n    urlObject.hash = '';\n    yield urlObject.href;\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n    yield urlWithoutIgnoredParams.href;\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\n        directoryURL.pathname += directoryIndex;\n        yield directoryURL.href;\n    }\n    if (cleanURLs) {\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\n        cleanURL.pathname += '.html';\n        yield cleanURL.href;\n    }\n    if (urlManipulation) {\n        const additionalURLs = urlManipulation({ url: urlObject });\n        for (const urlToAttempt of additionalURLs) {\n            yield urlToAttempt.href;\n        }\n    }\n}\n"],"mappings":";;;sDAmBiBA,qB;;AAnBjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,yBAAT,QAA0C,gCAA1C;AACA,OAAO,gBAAP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAUD,qBAAV,CAAgCE,GAAhC;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;;EAAA;IAAA;MAAA;QAAA;UAAA,+DAAkK,EAAlK,+BAAuCC,2BAAvC,EAAuCA,2BAAvC,sCAAqE,CAAC,OAAD,EAAU,UAAV,CAArE,qDAA4FC,cAA5F,EAA4FA,cAA5F,oCAA6G,YAA7G,8CAA2HC,SAA3H,EAA2HA,SAA3H,+BAAuI,IAAvI,mBAA6IC,eAA7I,QAA6IA,eAA7I;UACGC,SADH,GACe,IAAIC,GAAJ,CAAQN,GAAR,EAAaO,QAAQ,CAACC,IAAtB,CADf;UAEHH,SAAS,CAACI,IAAV,GAAiB,EAAjB;UAFG;UAGH,OAAMJ,SAAS,CAACG,IAAhB;;QAHG;UAIGE,uBAJH,GAI6BX,yBAAyB,CAACM,SAAD,EAAYJ,2BAAZ,CAJtD;UAAA;UAKH,OAAMS,uBAAuB,CAACF,IAA9B;;QALG;UAAA,MAMCN,cAAc,IAAIQ,uBAAuB,CAACC,QAAxB,CAAiCC,QAAjC,CAA0C,GAA1C,CANnB;YAAA;YAAA;UAAA;;UAOOC,YAPP,GAOsB,IAAIP,GAAJ,CAAQI,uBAAuB,CAACF,IAAhC,CAPtB;UAQCK,YAAY,CAACF,QAAb,IAAyBT,cAAzB;UARD;UASC,OAAMW,YAAY,CAACL,IAAnB;;QATD;UAAA,KAWCL,SAXD;YAAA;YAAA;UAAA;;UAYOW,QAZP,GAYkB,IAAIR,GAAJ,CAAQI,uBAAuB,CAACF,IAAhC,CAZlB;UAaCM,QAAQ,CAACH,QAAT,IAAqB,OAArB;UAbD;UAcC,OAAMG,QAAQ,CAACN,IAAf;;QAdD;UAAA,KAgBCJ,eAhBD;YAAA;YAAA;UAAA;;UAiBOW,cAjBP,GAiBwBX,eAAe,CAAC;YAAEJ,GAAG,EAAEK;UAAP,CAAD,CAjBvC;UAAA,uCAkB4BU,cAlB5B;UAAA;;UAAA;;QAAA;UAAA;YAAA;YAAA;UAAA;;UAkBYC,YAlBZ;UAAA;UAmBK,OAAMA,YAAY,CAACR,IAAnB;;QAnBL;UAAA;UAAA;;QAAA;UAAA;UAAA;;QAAA;UAAA;UAAA;;UAAA;;QAAA;UAAA;;UAAA;;UAAA;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module"}