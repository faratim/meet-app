{"ast":null,"code":"import _regeneratorRuntime from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createClass from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n\n/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to determine the\n * of assets that were updated (or not updated) during the install event.\n *\n * @private\n */\n\nvar PrecacheInstallReportPlugin = /*#__PURE__*/_createClass(function PrecacheInstallReportPlugin() {\n  var _this = this;\n\n  _classCallCheck(this, PrecacheInstallReportPlugin);\n\n  this.updatedURLs = [];\n  this.notUpdatedURLs = [];\n\n  this.handlerWillStart = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {\n      var request, state;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              request = _ref.request, state = _ref.state;\n\n              // TODO: `state` should never be undefined...\n              if (state) {\n                state.originalRequest = request;\n              }\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  this.cachedResponseWillBeUsed = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref3) {\n      var event, state, cachedResponse, url;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              event = _ref3.event, state = _ref3.state, cachedResponse = _ref3.cachedResponse;\n\n              if (event.type === 'install') {\n                if (state && state.originalRequest && state.originalRequest instanceof Request) {\n                  // TODO: `state` should never be undefined...\n                  url = state.originalRequest.url;\n\n                  if (cachedResponse) {\n                    _this.notUpdatedURLs.push(url);\n                  } else {\n                    _this.updatedURLs.push(url);\n                  }\n                }\n              }\n\n              return _context2.abrupt(\"return\", cachedResponse);\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n});\n\nexport { PrecacheInstallReportPlugin };","map":{"version":3,"names":["PrecacheInstallReportPlugin","updatedURLs","notUpdatedURLs","handlerWillStart","request","state","originalRequest","cachedResponseWillBeUsed","event","cachedResponse","type","Request","url","push"],"sources":["/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/workbox-precaching/utils/PrecacheInstallReportPlugin.js"],"sourcesContent":["/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to determine the\n * of assets that were updated (or not updated) during the install event.\n *\n * @private\n */\nclass PrecacheInstallReportPlugin {\n    constructor() {\n        this.updatedURLs = [];\n        this.notUpdatedURLs = [];\n        this.handlerWillStart = async ({ request, state, }) => {\n            // TODO: `state` should never be undefined...\n            if (state) {\n                state.originalRequest = request;\n            }\n        };\n        this.cachedResponseWillBeUsed = async ({ event, state, cachedResponse, }) => {\n            if (event.type === 'install') {\n                if (state &&\n                    state.originalRequest &&\n                    state.originalRequest instanceof Request) {\n                    // TODO: `state` should never be undefined...\n                    const url = state.originalRequest.url;\n                    if (cachedResponse) {\n                        this.notUpdatedURLs.push(url);\n                    }\n                    else {\n                        this.updatedURLs.push(url);\n                    }\n                }\n            }\n            return cachedResponse;\n        };\n    }\n}\nexport { PrecacheInstallReportPlugin };\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,gBAAP;AACA;AACA;AACA;AACA;AACA;AACA;;IACMA,2B,6BACF,uCAAc;EAAA;;EAAA;;EACV,KAAKC,WAAL,GAAmB,EAAnB;EACA,KAAKC,cAAL,GAAsB,EAAtB;;EACA,KAAKC,gBAAL;IAAA,uEAAwB;MAAA;MAAA;QAAA;UAAA;YAAA;cAASC,OAAT,QAASA,OAAT,EAAkBC,KAAlB,QAAkBA,KAAlB;;cACpB;cACA,IAAIA,KAAJ,EAAW;gBACPA,KAAK,CAACC,eAAN,GAAwBF,OAAxB;cACH;;YAJmB;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAxB;;IAAA;MAAA;IAAA;EAAA;;EAMA,KAAKG,wBAAL;IAAA,uEAAgC;MAAA;MAAA;QAAA;UAAA;YAAA;cAASC,KAAT,SAASA,KAAT,EAAgBH,KAAhB,SAAgBA,KAAhB,EAAuBI,cAAvB,SAAuBA,cAAvB;;cAC5B,IAAID,KAAK,CAACE,IAAN,KAAe,SAAnB,EAA8B;gBAC1B,IAAIL,KAAK,IACLA,KAAK,CAACC,eADN,IAEAD,KAAK,CAACC,eAAN,YAAiCK,OAFrC,EAE8C;kBAC1C;kBACMC,GAFoC,GAE9BP,KAAK,CAACC,eAAN,CAAsBM,GAFQ;;kBAG1C,IAAIH,cAAJ,EAAoB;oBAChB,KAAI,CAACP,cAAL,CAAoBW,IAApB,CAAyBD,GAAzB;kBACH,CAFD,MAGK;oBACD,KAAI,CAACX,WAAL,CAAiBY,IAAjB,CAAsBD,GAAtB;kBACH;gBACJ;cACJ;;cAd2B,kCAerBH,cAfqB;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAhC;;IAAA;MAAA;IAAA;EAAA;AAiBH,C;;AAEL,SAAST,2BAAT"},"metadata":{},"sourceType":"module"}