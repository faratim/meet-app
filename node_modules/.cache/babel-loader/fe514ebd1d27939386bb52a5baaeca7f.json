{"ast":null,"code":"import _createClass from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */\n\nvar Deferred = /*#__PURE__*/_createClass(\n/**\n * Creates a promise and exposes its resolve and reject functions as methods.\n */\nfunction Deferred() {\n  var _this = this;\n\n  _classCallCheck(this, Deferred);\n\n  this.promise = new Promise(function (resolve, reject) {\n    _this.resolve = resolve;\n    _this.reject = reject;\n  });\n});\n\nexport { Deferred };","map":{"version":3,"names":["Deferred","promise","Promise","resolve","reject"],"sources":["/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/workbox-core/_private/Deferred.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */\nclass Deferred {\n    /**\n     * Creates a promise and exposes its resolve and reject functions as methods.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\nexport { Deferred };\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,gBAAP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMA,Q;AACF;AACJ;AACA;AACI,oBAAc;EAAA;;EAAA;;EACV,KAAKC,OAAL,GAAe,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;IAC5C,KAAI,CAACD,OAAL,GAAeA,OAAf;IACA,KAAI,CAACC,MAAL,GAAcA,MAAd;EACH,CAHc,CAAf;AAIH,C;;AAEL,SAASJ,QAAT"},"metadata":{},"sourceType":"module"}