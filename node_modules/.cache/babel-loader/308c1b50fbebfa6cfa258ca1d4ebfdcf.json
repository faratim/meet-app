{"ast":null,"code":"import _regeneratorRuntime from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nvar SUBSTRING_TO_FIND = '-precache-';\n/**\n * Cleans up incompatible precaches that were created by older versions of\n * Workbox, by a service worker registered under the current scope.\n *\n * This is meant to be called as part of the `activate` event.\n *\n * This should be safe to use as long as you don't include `substringToFind`\n * (defaulting to `-precache-`) in your non-precache cache names.\n *\n * @param {string} currentPrecacheName The cache name currently in use for\n * precaching. This cache won't be deleted.\n * @param {string} [substringToFind='-precache-'] Cache names which include this\n * substring will be deleted (excluding `currentPrecacheName`).\n * @return {Array<string>} A list of all the cache names that were deleted.\n *\n * @private\n * @memberof workbox-precaching\n */\n\nvar deleteOutdatedCaches = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(currentPrecacheName) {\n    var substringToFind,\n        cacheNames,\n        cacheNamesToDelete,\n        _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            substringToFind = _args.length > 1 && _args[1] !== undefined ? _args[1] : SUBSTRING_TO_FIND;\n            _context.next = 3;\n            return self.caches.keys();\n\n          case 3:\n            cacheNames = _context.sent;\n            cacheNamesToDelete = cacheNames.filter(function (cacheName) {\n              return cacheName.includes(substringToFind) && cacheName.includes(self.registration.scope) && cacheName !== currentPrecacheName;\n            });\n            _context.next = 7;\n            return Promise.all(cacheNamesToDelete.map(function (cacheName) {\n              return self.caches.delete(cacheName);\n            }));\n\n          case 7:\n            return _context.abrupt(\"return\", cacheNamesToDelete);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function deleteOutdatedCaches(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport { deleteOutdatedCaches };","map":{"version":3,"names":["SUBSTRING_TO_FIND","deleteOutdatedCaches","currentPrecacheName","substringToFind","self","caches","keys","cacheNames","cacheNamesToDelete","filter","cacheName","includes","registration","scope","Promise","all","map","delete"],"sources":["/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/workbox-precaching/utils/deleteOutdatedCaches.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst SUBSTRING_TO_FIND = '-precache-';\n/**\n * Cleans up incompatible precaches that were created by older versions of\n * Workbox, by a service worker registered under the current scope.\n *\n * This is meant to be called as part of the `activate` event.\n *\n * This should be safe to use as long as you don't include `substringToFind`\n * (defaulting to `-precache-`) in your non-precache cache names.\n *\n * @param {string} currentPrecacheName The cache name currently in use for\n * precaching. This cache won't be deleted.\n * @param {string} [substringToFind='-precache-'] Cache names which include this\n * substring will be deleted (excluding `currentPrecacheName`).\n * @return {Array<string>} A list of all the cache names that were deleted.\n *\n * @private\n * @memberof workbox-precaching\n */\nconst deleteOutdatedCaches = async (currentPrecacheName, substringToFind = SUBSTRING_TO_FIND) => {\n    const cacheNames = await self.caches.keys();\n    const cacheNamesToDelete = cacheNames.filter((cacheName) => {\n        return (cacheName.includes(substringToFind) &&\n            cacheName.includes(self.registration.scope) &&\n            cacheName !== currentPrecacheName);\n    });\n    await Promise.all(cacheNamesToDelete.map((cacheName) => self.caches.delete(cacheName)));\n    return cacheNamesToDelete;\n};\nexport { deleteOutdatedCaches };\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,gBAAP;AACA,IAAMA,iBAAiB,GAAG,YAA1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,oBAAoB;EAAA,sEAAG,iBAAOC,mBAAP;IAAA;IAAA;IAAA;IAAA;IAAA;MAAA;QAAA;UAAA;YAA4BC,eAA5B,2DAA8CH,iBAA9C;YAAA;YAAA,OACAI,IAAI,CAACC,MAAL,CAAYC,IAAZ,EADA;;UAAA;YACnBC,UADmB;YAEnBC,kBAFmB,GAEED,UAAU,CAACE,MAAX,CAAkB,UAACC,SAAD,EAAe;cACxD,OAAQA,SAAS,CAACC,QAAV,CAAmBR,eAAnB,KACJO,SAAS,CAACC,QAAV,CAAmBP,IAAI,CAACQ,YAAL,CAAkBC,KAArC,CADI,IAEJH,SAAS,KAAKR,mBAFlB;YAGH,CAJ0B,CAFF;YAAA;YAAA,OAOnBY,OAAO,CAACC,GAAR,CAAYP,kBAAkB,CAACQ,GAAnB,CAAuB,UAACN,SAAD;cAAA,OAAeN,IAAI,CAACC,MAAL,CAAYY,MAAZ,CAAmBP,SAAnB,CAAf;YAAA,CAAvB,CAAZ,CAPmB;;UAAA;YAAA,iCAQlBF,kBARkB;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAApBP,oBAAoB;IAAA;EAAA;AAAA,GAA1B;;AAUA,SAASA,oBAAT"},"metadata":{},"sourceType":"module"}