{"ast":null,"code":"import _regeneratorRuntime from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n\n/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n\nfunction stripParams(fullURL, ignoreParams) {\n  var strippedURL = new URL(fullURL);\n\n  var _iterator = _createForOfIteratorHelper(ignoreParams),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var param = _step.value;\n      strippedURL.searchParams.delete(param);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return strippedURL.href;\n}\n/**\n * Matches an item in the cache, ignoring specific URL params. This is similar\n * to the `ignoreSearch` option, but it allows you to ignore just specific\n * params (while continuing to match on the others).\n *\n * @private\n * @param {Cache} cache\n * @param {Request} request\n * @param {Object} matchOptions\n * @param {Array<string>} ignoreParams\n * @return {Promise<Response|undefined>}\n */\n\n\nfunction cacheMatchIgnoreParams(_x, _x2, _x3, _x4) {\n  return _cacheMatchIgnoreParams.apply(this, arguments);\n}\n\nfunction _cacheMatchIgnoreParams() {\n  _cacheMatchIgnoreParams = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(cache, request, ignoreParams, matchOptions) {\n    var strippedRequestURL, keysOptions, cacheKeys, _iterator2, _step2, cacheKey, strippedCacheKeyURL;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            strippedRequestURL = stripParams(request.url, ignoreParams); // If the request doesn't include any ignored params, match as normal.\n\n            if (!(request.url === strippedRequestURL)) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", cache.match(request, matchOptions));\n\n          case 3:\n            // Otherwise, match by comparing keys\n            keysOptions = Object.assign(Object.assign({}, matchOptions), {\n              ignoreSearch: true\n            });\n            _context.next = 6;\n            return cache.keys(request, keysOptions);\n\n          case 6:\n            cacheKeys = _context.sent;\n            _iterator2 = _createForOfIteratorHelper(cacheKeys);\n            _context.prev = 8;\n\n            _iterator2.s();\n\n          case 10:\n            if ((_step2 = _iterator2.n()).done) {\n              _context.next = 17;\n              break;\n            }\n\n            cacheKey = _step2.value;\n            strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n\n            if (!(strippedRequestURL === strippedCacheKeyURL)) {\n              _context.next = 15;\n              break;\n            }\n\n            return _context.abrupt(\"return\", cache.match(cacheKey, matchOptions));\n\n          case 15:\n            _context.next = 10;\n            break;\n\n          case 17:\n            _context.next = 22;\n            break;\n\n          case 19:\n            _context.prev = 19;\n            _context.t0 = _context[\"catch\"](8);\n\n            _iterator2.e(_context.t0);\n\n          case 22:\n            _context.prev = 22;\n\n            _iterator2.f();\n\n            return _context.finish(22);\n\n          case 25:\n            return _context.abrupt(\"return\");\n\n          case 26:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[8, 19, 22, 25]]);\n  }));\n  return _cacheMatchIgnoreParams.apply(this, arguments);\n}\n\nexport { cacheMatchIgnoreParams };","map":{"version":3,"names":["stripParams","fullURL","ignoreParams","strippedURL","URL","param","searchParams","delete","href","cacheMatchIgnoreParams","cache","request","matchOptions","strippedRequestURL","url","match","keysOptions","Object","assign","ignoreSearch","keys","cacheKeys","cacheKey","strippedCacheKeyURL"],"sources":["/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/workbox-core/_private/cacheMatchIgnoreParams.js"],"sourcesContent":["/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nfunction stripParams(fullURL, ignoreParams) {\n    const strippedURL = new URL(fullURL);\n    for (const param of ignoreParams) {\n        strippedURL.searchParams.delete(param);\n    }\n    return strippedURL.href;\n}\n/**\n * Matches an item in the cache, ignoring specific URL params. This is similar\n * to the `ignoreSearch` option, but it allows you to ignore just specific\n * params (while continuing to match on the others).\n *\n * @private\n * @param {Cache} cache\n * @param {Request} request\n * @param {Object} matchOptions\n * @param {Array<string>} ignoreParams\n * @return {Promise<Response|undefined>}\n */\nasync function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\n    const strippedRequestURL = stripParams(request.url, ignoreParams);\n    // If the request doesn't include any ignored params, match as normal.\n    if (request.url === strippedRequestURL) {\n        return cache.match(request, matchOptions);\n    }\n    // Otherwise, match by comparing keys\n    const keysOptions = Object.assign(Object.assign({}, matchOptions), { ignoreSearch: true });\n    const cacheKeys = await cache.keys(request, keysOptions);\n    for (const cacheKey of cacheKeys) {\n        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n        if (strippedRequestURL === strippedCacheKeyURL) {\n            return cache.match(cacheKey, matchOptions);\n        }\n    }\n    return;\n}\nexport { cacheMatchIgnoreParams };\n"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,gBAAP;;AACA,SAASA,WAAT,CAAqBC,OAArB,EAA8BC,YAA9B,EAA4C;EACxC,IAAMC,WAAW,GAAG,IAAIC,GAAJ,CAAQH,OAAR,CAApB;;EADwC,2CAEpBC,YAFoB;EAAA;;EAAA;IAExC,oDAAkC;MAAA,IAAvBG,KAAuB;MAC9BF,WAAW,CAACG,YAAZ,CAAyBC,MAAzB,CAAgCF,KAAhC;IACH;EAJuC;IAAA;EAAA;IAAA;EAAA;;EAKxC,OAAOF,WAAW,CAACK,IAAnB;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;SACeC,sB;;;;;uFAAf,iBAAsCC,KAAtC,EAA6CC,OAA7C,EAAsDT,YAAtD,EAAoEU,YAApE;IAAA;;IAAA;MAAA;QAAA;UAAA;YACUC,kBADV,GAC+Bb,WAAW,CAACW,OAAO,CAACG,GAAT,EAAcZ,YAAd,CAD1C,EAEI;;YAFJ,MAGQS,OAAO,CAACG,GAAR,KAAgBD,kBAHxB;cAAA;cAAA;YAAA;;YAAA,iCAIeH,KAAK,CAACK,KAAN,CAAYJ,OAAZ,EAAqBC,YAArB,CAJf;;UAAA;YAMI;YACMI,WAPV,GAOwBC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,YAAlB,CAAd,EAA+C;cAAEO,YAAY,EAAE;YAAhB,CAA/C,CAPxB;YAAA;YAAA,OAQ4BT,KAAK,CAACU,IAAN,CAAWT,OAAX,EAAoBK,WAApB,CAR5B;;UAAA;YAQUK,SARV;YAAA,wCAS2BA,SAT3B;YAAA;;YAAA;;UAAA;YAAA;cAAA;cAAA;YAAA;;YASeC,QATf;YAUcC,mBAVd,GAUoCvB,WAAW,CAACsB,QAAQ,CAACR,GAAV,EAAeZ,YAAf,CAV/C;;YAAA,MAWYW,kBAAkB,KAAKU,mBAXnC;cAAA;cAAA;YAAA;;YAAA,iCAYmBb,KAAK,CAACK,KAAN,CAAYO,QAAZ,EAAsBV,YAAtB,CAZnB;;UAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;;YAAA;;UAAA;YAAA;;YAAA;;YAAA;;UAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAiBA,SAASH,sBAAT"},"metadata":{},"sourceType":"module"}