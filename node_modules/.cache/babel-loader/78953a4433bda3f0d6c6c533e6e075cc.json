{"ast":null,"code":"import _regeneratorRuntime from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheMatchIgnoreParams } from 'workbox-core/_private/cacheMatchIgnoreParams.js';\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\nimport { executeQuotaErrorCallbacks } from 'workbox-core/_private/executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\n\nfunction toRequest(input) {\n  return typeof input === 'string' ? new Request(input) : input;\n}\n/**\n * A class created every time a Strategy instance instance calls\n * {@link workbox-strategies.Strategy~handle} or\n * {@link workbox-strategies.Strategy~handleAll} that wraps all fetch and\n * cache actions around plugin callbacks and keeps track of when the strategy\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\n *\n * @memberof workbox-strategies\n */\n\n\nvar StrategyHandler = /*#__PURE__*/function () {\n  /**\n   * Creates a new instance associated with the passed strategy and event\n   * that's handling the request.\n   *\n   * The constructor also initializes the state that will be passed to each of\n   * the plugins handling this request.\n   *\n   * @param {workbox-strategies.Strategy} strategy\n   * @param {Object} options\n   * @param {Request|string} options.request A request to run this strategy for.\n   * @param {ExtendableEvent} options.event The event associated with the\n   *     request.\n   * @param {URL} [options.url]\n   * @param {*} [options.params] The return value from the\n   *     {@link workbox-routing~matchCallback} (if applicable).\n   */\n  function StrategyHandler(strategy, options) {\n    _classCallCheck(this, StrategyHandler);\n\n    this._cacheKeys = {};\n    /**\n     * The request the strategy is performing (passed to the strategy's\n     * `handle()` or `handleAll()` method).\n     * @name request\n     * @instance\n     * @type {Request}\n     * @memberof workbox-strategies.StrategyHandler\n     */\n\n    /**\n     * The event associated with this request.\n     * @name event\n     * @instance\n     * @type {ExtendableEvent}\n     * @memberof workbox-strategies.StrategyHandler\n     */\n\n    /**\n     * A `URL` instance of `request.url` (if passed to the strategy's\n     * `handle()` or `handleAll()` method).\n     * Note: the `url` param will be present if the strategy was invoked\n     * from a workbox `Route` object.\n     * @name url\n     * @instance\n     * @type {URL|undefined}\n     * @memberof workbox-strategies.StrategyHandler\n     */\n\n    /**\n     * A `param` value (if passed to the strategy's\n     * `handle()` or `handleAll()` method).\n     * Note: the `param` param will be present if the strategy was invoked\n     * from a workbox `Route` object and the\n     * {@link workbox-routing~matchCallback} returned\n     * a truthy value (it will be that value).\n     * @name params\n     * @instance\n     * @type {*|undefined}\n     * @memberof workbox-strategies.StrategyHandler\n     */\n\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(options.event, ExtendableEvent, {\n        moduleName: 'workbox-strategies',\n        className: 'StrategyHandler',\n        funcName: 'constructor',\n        paramName: 'options.event'\n      });\n    }\n\n    Object.assign(this, options);\n    this.event = options.event;\n    this._strategy = strategy;\n    this._handlerDeferred = new Deferred();\n    this._extendLifetimePromises = []; // Copy the plugins list (since it's mutable on the strategy),\n    // so any mutations don't affect this handler instance.\n\n    this._plugins = _toConsumableArray(strategy.plugins);\n    this._pluginStateMap = new Map();\n\n    var _iterator = _createForOfIteratorHelper(this._plugins),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var plugin = _step.value;\n\n        this._pluginStateMap.set(plugin, {});\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    this.event.waitUntil(this._handlerDeferred.promise);\n  }\n  /**\n   * Fetches a given request (and invokes any applicable plugin callback\n   * methods) using the `fetchOptions` (for non-navigation requests) and\n   * `plugins` defined on the `Strategy` object.\n   *\n   * The following plugin lifecycle methods are invoked when using this method:\n   * - `requestWillFetch()`\n   * - `fetchDidSucceed()`\n   * - `fetchDidFail()`\n   *\n   * @param {Request|string} input The URL or request to fetch.\n   * @return {Promise<Response>}\n   */\n\n\n  _createClass(StrategyHandler, [{\n    key: \"fetch\",\n    value: function (_fetch) {\n      function fetch(_x) {\n        return _fetch.apply(this, arguments);\n      }\n\n      fetch.toString = function () {\n        return _fetch.toString();\n      };\n\n      return fetch;\n    }(\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(input) {\n        var event, request, possiblePreloadResponse, originalRequest, _iterator2, _step2, cb, pluginFilteredRequest, fetchResponse, _iterator3, _step3, callback;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                event = this.event;\n                request = toRequest(input);\n\n                if (!(request.mode === 'navigate' && event instanceof FetchEvent && event.preloadResponse)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 5;\n                return event.preloadResponse;\n\n              case 5:\n                possiblePreloadResponse = _context.sent;\n\n                if (!possiblePreloadResponse) {\n                  _context.next = 9;\n                  break;\n                }\n\n                if (process.env.NODE_ENV !== 'production') {\n                  logger.log(\"Using a preloaded navigation response for \" + \"'\".concat(getFriendlyURL(request.url), \"'\"));\n                }\n\n                return _context.abrupt(\"return\", possiblePreloadResponse);\n\n              case 9:\n                // If there is a fetchDidFail plugin, we need to save a clone of the\n                // original request before it's either modified by a requestWillFetch\n                // plugin or before the original request's body is consumed via fetch().\n                originalRequest = this.hasCallback('fetchDidFail') ? request.clone() : null;\n                _context.prev = 10;\n                _iterator2 = _createForOfIteratorHelper(this.iterateCallbacks('requestWillFetch'));\n                _context.prev = 12;\n\n                _iterator2.s();\n\n              case 14:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context.next = 21;\n                  break;\n                }\n\n                cb = _step2.value;\n                _context.next = 18;\n                return cb({\n                  request: request.clone(),\n                  event: event\n                });\n\n              case 18:\n                request = _context.sent;\n\n              case 19:\n                _context.next = 14;\n                break;\n\n              case 21:\n                _context.next = 26;\n                break;\n\n              case 23:\n                _context.prev = 23;\n                _context.t0 = _context[\"catch\"](12);\n\n                _iterator2.e(_context.t0);\n\n              case 26:\n                _context.prev = 26;\n\n                _iterator2.f();\n\n                return _context.finish(26);\n\n              case 29:\n                _context.next = 35;\n                break;\n\n              case 31:\n                _context.prev = 31;\n                _context.t1 = _context[\"catch\"](10);\n\n                if (!(_context.t1 instanceof Error)) {\n                  _context.next = 35;\n                  break;\n                }\n\n                throw new WorkboxError('plugin-error-request-will-fetch', {\n                  thrownErrorMessage: _context.t1.message\n                });\n\n              case 35:\n                // The request can be altered by plugins with `requestWillFetch` making\n                // the original request (most likely from a `fetch` event) different\n                // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n                pluginFilteredRequest = request.clone();\n                _context.prev = 36;\n                _context.next = 39;\n                return fetch(request, request.mode === 'navigate' ? undefined : this._strategy.fetchOptions);\n\n              case 39:\n                fetchResponse = _context.sent;\n\n                if (process.env.NODE_ENV !== 'production') {\n                  logger.debug(\"Network request for \" + \"'\".concat(getFriendlyURL(request.url), \"' returned a response with \") + \"status '\".concat(fetchResponse.status, \"'.\"));\n                }\n\n                _iterator3 = _createForOfIteratorHelper(this.iterateCallbacks('fetchDidSucceed'));\n                _context.prev = 42;\n\n                _iterator3.s();\n\n              case 44:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context.next = 51;\n                  break;\n                }\n\n                callback = _step3.value;\n                _context.next = 48;\n                return callback({\n                  event: event,\n                  request: pluginFilteredRequest,\n                  response: fetchResponse\n                });\n\n              case 48:\n                fetchResponse = _context.sent;\n\n              case 49:\n                _context.next = 44;\n                break;\n\n              case 51:\n                _context.next = 56;\n                break;\n\n              case 53:\n                _context.prev = 53;\n                _context.t2 = _context[\"catch\"](42);\n\n                _iterator3.e(_context.t2);\n\n              case 56:\n                _context.prev = 56;\n\n                _iterator3.f();\n\n                return _context.finish(56);\n\n              case 59:\n                return _context.abrupt(\"return\", fetchResponse);\n\n              case 62:\n                _context.prev = 62;\n                _context.t3 = _context[\"catch\"](36);\n\n                if (process.env.NODE_ENV !== 'production') {\n                  logger.log(\"Network request for \" + \"'\".concat(getFriendlyURL(request.url), \"' threw an error.\"), _context.t3);\n                } // `originalRequest` will only exist if a `fetchDidFail` callback\n                // is being used (see above).\n\n\n                if (!originalRequest) {\n                  _context.next = 68;\n                  break;\n                }\n\n                _context.next = 68;\n                return this.runCallbacks('fetchDidFail', {\n                  error: _context.t3,\n                  event: event,\n                  originalRequest: originalRequest.clone(),\n                  request: pluginFilteredRequest.clone()\n                });\n\n              case 68:\n                throw _context.t3;\n\n              case 69:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[10, 31], [12, 23, 26, 29], [36, 62], [42, 53, 56, 59]]);\n      }));\n\n      return function (_x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n    /**\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\n     * the response generated by `this.fetch()`.\n     *\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\n     * so you do not have to manually call `waitUntil()` on the event.\n     *\n     * @param {Request|string} input The request or URL to fetch and cache.\n     * @return {Promise<Response>}\n     */\n    )\n  }, {\n    key: \"fetchAndCachePut\",\n    value: function () {\n      var _fetchAndCachePut = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(input) {\n        var response, responseClone;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.fetch(input);\n\n              case 2:\n                response = _context2.sent;\n                responseClone = response.clone();\n                void this.waitUntil(this.cachePut(input, responseClone));\n                return _context2.abrupt(\"return\", response);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function fetchAndCachePut(_x3) {\n        return _fetchAndCachePut.apply(this, arguments);\n      }\n\n      return fetchAndCachePut;\n    }()\n    /**\n     * Matches a request from the cache (and invokes any applicable plugin\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\n     * defined on the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cachedResponseWillByUsed()\n     *\n     * @param {Request|string} key The Request or URL to use as the cache key.\n     * @return {Promise<Response|undefined>} A matching response, if found.\n     */\n\n  }, {\n    key: \"cacheMatch\",\n    value: function () {\n      var _cacheMatch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(key) {\n        var request, cachedResponse, _this$_strategy, cacheName, matchOptions, effectiveRequest, multiMatchOptions, _iterator4, _step4, callback;\n\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                request = toRequest(key);\n                _this$_strategy = this._strategy, cacheName = _this$_strategy.cacheName, matchOptions = _this$_strategy.matchOptions;\n                _context3.next = 4;\n                return this.getCacheKey(request, 'read');\n\n              case 4:\n                effectiveRequest = _context3.sent;\n                multiMatchOptions = Object.assign(Object.assign({}, matchOptions), {\n                  cacheName: cacheName\n                });\n                _context3.next = 8;\n                return caches.match(effectiveRequest, multiMatchOptions);\n\n              case 8:\n                cachedResponse = _context3.sent;\n\n                if (process.env.NODE_ENV !== 'production') {\n                  if (cachedResponse) {\n                    logger.debug(\"Found a cached response in '\".concat(cacheName, \"'.\"));\n                  } else {\n                    logger.debug(\"No cached response found in '\".concat(cacheName, \"'.\"));\n                  }\n                }\n\n                _iterator4 = _createForOfIteratorHelper(this.iterateCallbacks('cachedResponseWillBeUsed'));\n                _context3.prev = 11;\n\n                _iterator4.s();\n\n              case 13:\n                if ((_step4 = _iterator4.n()).done) {\n                  _context3.next = 23;\n                  break;\n                }\n\n                callback = _step4.value;\n                _context3.next = 17;\n                return callback({\n                  cacheName: cacheName,\n                  matchOptions: matchOptions,\n                  cachedResponse: cachedResponse,\n                  request: effectiveRequest,\n                  event: this.event\n                });\n\n              case 17:\n                _context3.t0 = _context3.sent;\n\n                if (_context3.t0) {\n                  _context3.next = 20;\n                  break;\n                }\n\n                _context3.t0 = undefined;\n\n              case 20:\n                cachedResponse = _context3.t0;\n\n              case 21:\n                _context3.next = 13;\n                break;\n\n              case 23:\n                _context3.next = 28;\n                break;\n\n              case 25:\n                _context3.prev = 25;\n                _context3.t1 = _context3[\"catch\"](11);\n\n                _iterator4.e(_context3.t1);\n\n              case 28:\n                _context3.prev = 28;\n\n                _iterator4.f();\n\n                return _context3.finish(28);\n\n              case 31:\n                return _context3.abrupt(\"return\", cachedResponse);\n\n              case 32:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[11, 25, 28, 31]]);\n      }));\n\n      function cacheMatch(_x4) {\n        return _cacheMatch.apply(this, arguments);\n      }\n\n      return cacheMatch;\n    }()\n    /**\n     * Puts a request/response pair in the cache (and invokes any applicable\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\n     * the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cacheWillUpdate()\n     * - cacheDidUpdate()\n     *\n     * @param {Request|string} key The request or URL to use as the cache key.\n     * @param {Response} response The response to cache.\n     * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\n     * not be cached, and `true` otherwise.\n     */\n\n  }, {\n    key: \"cachePut\",\n    value: function () {\n      var _cachePut = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(key, response) {\n        var request, effectiveRequest, vary, responseToCache, _this$_strategy2, cacheName, matchOptions, cache, hasCacheUpdateCallback, oldResponse, _iterator5, _step5, callback;\n\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                request = toRequest(key); // Run in the next task to avoid blocking other cache reads.\n                // https://github.com/w3c/ServiceWorker/issues/1397\n\n                _context4.next = 3;\n                return timeout(0);\n\n              case 3:\n                _context4.next = 5;\n                return this.getCacheKey(request, 'write');\n\n              case 5:\n                effectiveRequest = _context4.sent;\n\n                if (!(process.env.NODE_ENV !== 'production')) {\n                  _context4.next = 11;\n                  break;\n                }\n\n                if (!(effectiveRequest.method && effectiveRequest.method !== 'GET')) {\n                  _context4.next = 9;\n                  break;\n                }\n\n                throw new WorkboxError('attempt-to-cache-non-get-request', {\n                  url: getFriendlyURL(effectiveRequest.url),\n                  method: effectiveRequest.method\n                });\n\n              case 9:\n                // See https://github.com/GoogleChrome/workbox/issues/2818\n                vary = response.headers.get('Vary');\n\n                if (vary) {\n                  logger.debug(\"The response for \".concat(getFriendlyURL(effectiveRequest.url), \" \") + \"has a 'Vary: \".concat(vary, \"' header. \") + \"Consider setting the {ignoreVary: true} option on your strategy \" + \"to ensure cache matching and deletion works as expected.\");\n                }\n\n              case 11:\n                if (response) {\n                  _context4.next = 14;\n                  break;\n                }\n\n                if (process.env.NODE_ENV !== 'production') {\n                  logger.error(\"Cannot cache non-existent response for \" + \"'\".concat(getFriendlyURL(effectiveRequest.url), \"'.\"));\n                }\n\n                throw new WorkboxError('cache-put-with-no-response', {\n                  url: getFriendlyURL(effectiveRequest.url)\n                });\n\n              case 14:\n                _context4.next = 16;\n                return this._ensureResponseSafeToCache(response);\n\n              case 16:\n                responseToCache = _context4.sent;\n\n                if (responseToCache) {\n                  _context4.next = 20;\n                  break;\n                }\n\n                if (process.env.NODE_ENV !== 'production') {\n                  logger.debug(\"Response '\".concat(getFriendlyURL(effectiveRequest.url), \"' \") + \"will not be cached.\", responseToCache);\n                }\n\n                return _context4.abrupt(\"return\", false);\n\n              case 20:\n                _this$_strategy2 = this._strategy, cacheName = _this$_strategy2.cacheName, matchOptions = _this$_strategy2.matchOptions;\n                _context4.next = 23;\n                return self.caches.open(cacheName);\n\n              case 23:\n                cache = _context4.sent;\n                hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\n\n                if (!hasCacheUpdateCallback) {\n                  _context4.next = 31;\n                  break;\n                }\n\n                _context4.next = 28;\n                return cacheMatchIgnoreParams( // TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n                // feature. Consider into ways to only add this behavior if using\n                // precaching.\n                cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions);\n\n              case 28:\n                _context4.t0 = _context4.sent;\n                _context4.next = 32;\n                break;\n\n              case 31:\n                _context4.t0 = null;\n\n              case 32:\n                oldResponse = _context4.t0;\n\n                if (process.env.NODE_ENV !== 'production') {\n                  logger.debug(\"Updating the '\".concat(cacheName, \"' cache with a new Response \") + \"for \".concat(getFriendlyURL(effectiveRequest.url), \".\"));\n                }\n\n                _context4.prev = 34;\n                _context4.next = 37;\n                return cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\n\n              case 37:\n                _context4.next = 46;\n                break;\n\n              case 39:\n                _context4.prev = 39;\n                _context4.t1 = _context4[\"catch\"](34);\n\n                if (!(_context4.t1 instanceof Error)) {\n                  _context4.next = 46;\n                  break;\n                }\n\n                if (!(_context4.t1.name === 'QuotaExceededError')) {\n                  _context4.next = 45;\n                  break;\n                }\n\n                _context4.next = 45;\n                return executeQuotaErrorCallbacks();\n\n              case 45:\n                throw _context4.t1;\n\n              case 46:\n                _iterator5 = _createForOfIteratorHelper(this.iterateCallbacks('cacheDidUpdate'));\n                _context4.prev = 47;\n\n                _iterator5.s();\n\n              case 49:\n                if ((_step5 = _iterator5.n()).done) {\n                  _context4.next = 55;\n                  break;\n                }\n\n                callback = _step5.value;\n                _context4.next = 53;\n                return callback({\n                  cacheName: cacheName,\n                  oldResponse: oldResponse,\n                  newResponse: responseToCache.clone(),\n                  request: effectiveRequest,\n                  event: this.event\n                });\n\n              case 53:\n                _context4.next = 49;\n                break;\n\n              case 55:\n                _context4.next = 60;\n                break;\n\n              case 57:\n                _context4.prev = 57;\n                _context4.t2 = _context4[\"catch\"](47);\n\n                _iterator5.e(_context4.t2);\n\n              case 60:\n                _context4.prev = 60;\n\n                _iterator5.f();\n\n                return _context4.finish(60);\n\n              case 63:\n                return _context4.abrupt(\"return\", true);\n\n              case 64:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[34, 39], [47, 57, 60, 63]]);\n      }));\n\n      function cachePut(_x5, _x6) {\n        return _cachePut.apply(this, arguments);\n      }\n\n      return cachePut;\n    }()\n    /**\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\n     * executes any of those callbacks found in sequence. The final `Request`\n     * object returned by the last plugin is treated as the cache key for cache\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\n     * been registered, the passed request is returned unmodified\n     *\n     * @param {Request} request\n     * @param {string} mode\n     * @return {Promise<Request>}\n     */\n\n  }, {\n    key: \"getCacheKey\",\n    value: function () {\n      var _getCacheKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(request, mode) {\n        var key, effectiveRequest, _iterator6, _step6, callback;\n\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                key = \"\".concat(request.url, \" | \").concat(mode);\n\n                if (this._cacheKeys[key]) {\n                  _context5.next = 24;\n                  break;\n                }\n\n                effectiveRequest = request;\n                _iterator6 = _createForOfIteratorHelper(this.iterateCallbacks('cacheKeyWillBeUsed'));\n                _context5.prev = 4;\n\n                _iterator6.s();\n\n              case 6:\n                if ((_step6 = _iterator6.n()).done) {\n                  _context5.next = 15;\n                  break;\n                }\n\n                callback = _step6.value;\n                _context5.t0 = toRequest;\n                _context5.next = 11;\n                return callback({\n                  mode: mode,\n                  request: effectiveRequest,\n                  event: this.event,\n                  // params has a type any can't change right now.\n                  params: this.params // eslint-disable-line\n\n                });\n\n              case 11:\n                _context5.t1 = _context5.sent;\n                effectiveRequest = (0, _context5.t0)(_context5.t1);\n\n              case 13:\n                _context5.next = 6;\n                break;\n\n              case 15:\n                _context5.next = 20;\n                break;\n\n              case 17:\n                _context5.prev = 17;\n                _context5.t2 = _context5[\"catch\"](4);\n\n                _iterator6.e(_context5.t2);\n\n              case 20:\n                _context5.prev = 20;\n\n                _iterator6.f();\n\n                return _context5.finish(20);\n\n              case 23:\n                this._cacheKeys[key] = effectiveRequest;\n\n              case 24:\n                return _context5.abrupt(\"return\", this._cacheKeys[key]);\n\n              case 25:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[4, 17, 20, 23]]);\n      }));\n\n      function getCacheKey(_x7, _x8) {\n        return _getCacheKey.apply(this, arguments);\n      }\n\n      return getCacheKey;\n    }()\n    /**\n     * Returns true if the strategy has at least one plugin with the given\n     * callback.\n     *\n     * @param {string} name The name of the callback to check for.\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"hasCallback\",\n    value: function hasCallback(name) {\n      var _iterator7 = _createForOfIteratorHelper(this._strategy.plugins),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var plugin = _step7.value;\n\n          if (name in plugin) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      return false;\n    }\n    /**\n     * Runs all plugin callbacks matching the given name, in order, passing the\n     * given param object (merged ith the current plugin state) as the only\n     * argument.\n     *\n     * Note: since this method runs all plugins, it's not suitable for cases\n     * where the return value of a callback needs to be applied prior to calling\n     * the next callback. See\n     * {@link workbox-strategies.StrategyHandler#iterateCallbacks}\n     * below for how to handle that case.\n     *\n     * @param {string} name The name of the callback to run within each plugin.\n     * @param {Object} param The object to pass as the first (and only) param\n     *     when executing each callback. This object will be merged with the\n     *     current plugin state prior to callback execution.\n     */\n\n  }, {\n    key: \"runCallbacks\",\n    value: function () {\n      var _runCallbacks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(name, param) {\n        var _iterator8, _step8, callback;\n\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _iterator8 = _createForOfIteratorHelper(this.iterateCallbacks(name));\n                _context6.prev = 1;\n\n                _iterator8.s();\n\n              case 3:\n                if ((_step8 = _iterator8.n()).done) {\n                  _context6.next = 9;\n                  break;\n                }\n\n                callback = _step8.value;\n                _context6.next = 7;\n                return callback(param);\n\n              case 7:\n                _context6.next = 3;\n                break;\n\n              case 9:\n                _context6.next = 14;\n                break;\n\n              case 11:\n                _context6.prev = 11;\n                _context6.t0 = _context6[\"catch\"](1);\n\n                _iterator8.e(_context6.t0);\n\n              case 14:\n                _context6.prev = 14;\n\n                _iterator8.f();\n\n                return _context6.finish(14);\n\n              case 17:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[1, 11, 14, 17]]);\n      }));\n\n      function runCallbacks(_x9, _x10) {\n        return _runCallbacks.apply(this, arguments);\n      }\n\n      return runCallbacks;\n    }()\n    /**\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\n     * where each callback is wrapped with the current handler state (i.e. when\n     * you call each callback, whatever object parameter you pass it will\n     * be merged with the plugin's current state).\n     *\n     * @param {string} name The name fo the callback to run\n     * @return {Array<Function>}\n     */\n\n  }, {\n    key: \"iterateCallbacks\",\n    value:\n    /*#__PURE__*/\n    _regeneratorRuntime().mark(function iterateCallbacks(name) {\n      var _this = this;\n\n      var _iterator9, _step9, _loop;\n\n      return _regeneratorRuntime().wrap(function iterateCallbacks$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _iterator9 = _createForOfIteratorHelper(this._strategy.plugins);\n              _context8.prev = 1;\n              _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n                var plugin, state, statefulCallback;\n                return _regeneratorRuntime().wrap(function _loop$(_context7) {\n                  while (1) {\n                    switch (_context7.prev = _context7.next) {\n                      case 0:\n                        plugin = _step9.value;\n\n                        if (!(typeof plugin[name] === 'function')) {\n                          _context7.next = 6;\n                          break;\n                        }\n\n                        state = _this._pluginStateMap.get(plugin);\n\n                        statefulCallback = function statefulCallback(param) {\n                          var statefulParam = Object.assign(Object.assign({}, param), {\n                            state: state\n                          }); // TODO(philipwalton): not sure why `any` is needed. It seems like\n                          // this should work with `as WorkboxPluginCallbackParam[C]`.\n\n                          return plugin[name](statefulParam);\n                        };\n\n                        _context7.next = 6;\n                        return statefulCallback;\n\n                      case 6:\n                      case \"end\":\n                        return _context7.stop();\n                    }\n                  }\n                }, _loop);\n              });\n\n              _iterator9.s();\n\n            case 4:\n              if ((_step9 = _iterator9.n()).done) {\n                _context8.next = 8;\n                break;\n              }\n\n              return _context8.delegateYield(_loop(), \"t0\", 6);\n\n            case 6:\n              _context8.next = 4;\n              break;\n\n            case 8:\n              _context8.next = 13;\n              break;\n\n            case 10:\n              _context8.prev = 10;\n              _context8.t1 = _context8[\"catch\"](1);\n\n              _iterator9.e(_context8.t1);\n\n            case 13:\n              _context8.prev = 13;\n\n              _iterator9.f();\n\n              return _context8.finish(13);\n\n            case 16:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, iterateCallbacks, this, [[1, 10, 13, 16]]);\n    })\n    /**\n     * Adds a promise to the\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\n     * of the event event associated with the request being handled (usually a\n     * `FetchEvent`).\n     *\n     * Note: you can await\n     * {@link workbox-strategies.StrategyHandler~doneWaiting}\n     * to know when all added promises have settled.\n     *\n     * @param {Promise} promise A promise to add to the extend lifetime promises\n     *     of the event that triggered the request.\n     */\n\n  }, {\n    key: \"waitUntil\",\n    value: function waitUntil(promise) {\n      this._extendLifetimePromises.push(promise);\n\n      return promise;\n    }\n    /**\n     * Returns a promise that resolves once all promises passed to\n     * {@link workbox-strategies.StrategyHandler~waitUntil}\n     * have settled.\n     *\n     * Note: any work done after `doneWaiting()` settles should be manually\n     * passed to an event's `waitUntil()` method (not this handler's\n     * `waitUntil()` method), otherwise the service worker thread my be killed\n     * prior to your work completing.\n     */\n\n  }, {\n    key: \"doneWaiting\",\n    value: function () {\n      var _doneWaiting = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var promise;\n        return _regeneratorRuntime().wrap(function _callee7$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                if (!(promise = this._extendLifetimePromises.shift())) {\n                  _context9.next = 5;\n                  break;\n                }\n\n                _context9.next = 3;\n                return promise;\n\n              case 3:\n                _context9.next = 0;\n                break;\n\n              case 5:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function doneWaiting() {\n        return _doneWaiting.apply(this, arguments);\n      }\n\n      return doneWaiting;\n    }()\n    /**\n     * Stops running the strategy and immediately resolves any pending\n     * `waitUntil()` promises.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._handlerDeferred.resolve(null);\n    }\n    /**\n     * This method will call cacheWillUpdate on the available plugins (or use\n     * status === 200) to determine if the Response is safe and valid to cache.\n     *\n     * @param {Request} options.request\n     * @param {Response} options.response\n     * @return {Promise<Response|undefined>}\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_ensureResponseSafeToCache\",\n    value: function () {\n      var _ensureResponseSafeToCache2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(response) {\n        var responseToCache, pluginsUsed, _iterator10, _step10, callback;\n\n        return _regeneratorRuntime().wrap(function _callee8$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                responseToCache = response;\n                pluginsUsed = false;\n                _iterator10 = _createForOfIteratorHelper(this.iterateCallbacks('cacheWillUpdate'));\n                _context10.prev = 3;\n\n                _iterator10.s();\n\n              case 5:\n                if ((_step10 = _iterator10.n()).done) {\n                  _context10.next = 18;\n                  break;\n                }\n\n                callback = _step10.value;\n                _context10.next = 9;\n                return callback({\n                  request: this.request,\n                  response: responseToCache,\n                  event: this.event\n                });\n\n              case 9:\n                _context10.t0 = _context10.sent;\n\n                if (_context10.t0) {\n                  _context10.next = 12;\n                  break;\n                }\n\n                _context10.t0 = undefined;\n\n              case 12:\n                responseToCache = _context10.t0;\n                pluginsUsed = true;\n\n                if (responseToCache) {\n                  _context10.next = 16;\n                  break;\n                }\n\n                return _context10.abrupt(\"break\", 18);\n\n              case 16:\n                _context10.next = 5;\n                break;\n\n              case 18:\n                _context10.next = 23;\n                break;\n\n              case 20:\n                _context10.prev = 20;\n                _context10.t1 = _context10[\"catch\"](3);\n\n                _iterator10.e(_context10.t1);\n\n              case 23:\n                _context10.prev = 23;\n\n                _iterator10.f();\n\n                return _context10.finish(23);\n\n              case 26:\n                if (!pluginsUsed) {\n                  if (responseToCache && responseToCache.status !== 200) {\n                    responseToCache = undefined;\n                  }\n\n                  if (process.env.NODE_ENV !== 'production') {\n                    if (responseToCache) {\n                      if (responseToCache.status !== 200) {\n                        if (responseToCache.status === 0) {\n                          logger.warn(\"The response for '\".concat(this.request.url, \"' \") + \"is an opaque response. The caching strategy that you're \" + \"using will not cache opaque responses by default.\");\n                        } else {\n                          logger.debug(\"The response for '\".concat(this.request.url, \"' \") + \"returned a status code of '\".concat(response.status, \"' and won't \") + \"be cached as a result.\");\n                        }\n                      }\n                    }\n                  }\n                }\n\n                return _context10.abrupt(\"return\", responseToCache);\n\n              case 28:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee8, this, [[3, 20, 23, 26]]);\n      }));\n\n      function _ensureResponseSafeToCache(_x11) {\n        return _ensureResponseSafeToCache2.apply(this, arguments);\n      }\n\n      return _ensureResponseSafeToCache;\n    }()\n  }]);\n\n  return StrategyHandler;\n}();\n\nexport { StrategyHandler };","map":{"version":3,"names":["assert","cacheMatchIgnoreParams","Deferred","executeQuotaErrorCallbacks","getFriendlyURL","logger","timeout","WorkboxError","toRequest","input","Request","StrategyHandler","strategy","options","_cacheKeys","process","env","NODE_ENV","isInstance","event","ExtendableEvent","moduleName","className","funcName","paramName","Object","assign","_strategy","_handlerDeferred","_extendLifetimePromises","_plugins","plugins","_pluginStateMap","Map","plugin","set","waitUntil","promise","request","mode","FetchEvent","preloadResponse","possiblePreloadResponse","log","url","originalRequest","hasCallback","clone","iterateCallbacks","cb","Error","thrownErrorMessage","message","pluginFilteredRequest","fetch","undefined","fetchOptions","fetchResponse","debug","status","callback","response","runCallbacks","error","responseClone","cachePut","key","cacheName","matchOptions","getCacheKey","effectiveRequest","multiMatchOptions","caches","match","cachedResponse","method","vary","headers","get","_ensureResponseSafeToCache","responseToCache","self","open","cache","hasCacheUpdateCallback","oldResponse","put","name","newResponse","params","param","state","statefulCallback","statefulParam","push","shift","resolve","pluginsUsed","warn"],"sources":["/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/workbox-strategies/StrategyHandler.js"],"sourcesContent":["/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheMatchIgnoreParams } from 'workbox-core/_private/cacheMatchIgnoreParams.js';\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\nimport { executeQuotaErrorCallbacks } from 'workbox-core/_private/executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\nfunction toRequest(input) {\n    return typeof input === 'string' ? new Request(input) : input;\n}\n/**\n * A class created every time a Strategy instance instance calls\n * {@link workbox-strategies.Strategy~handle} or\n * {@link workbox-strategies.Strategy~handleAll} that wraps all fetch and\n * cache actions around plugin callbacks and keeps track of when the strategy\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\n *\n * @memberof workbox-strategies\n */\nclass StrategyHandler {\n    /**\n     * Creates a new instance associated with the passed strategy and event\n     * that's handling the request.\n     *\n     * The constructor also initializes the state that will be passed to each of\n     * the plugins handling this request.\n     *\n     * @param {workbox-strategies.Strategy} strategy\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params] The return value from the\n     *     {@link workbox-routing~matchCallback} (if applicable).\n     */\n    constructor(strategy, options) {\n        this._cacheKeys = {};\n        /**\n         * The request the strategy is performing (passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * @name request\n         * @instance\n         * @type {Request}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * The event associated with this request.\n         * @name event\n         * @instance\n         * @type {ExtendableEvent}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `URL` instance of `request.url` (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `url` param will be present if the strategy was invoked\n         * from a workbox `Route` object.\n         * @name url\n         * @instance\n         * @type {URL|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `param` value (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `param` param will be present if the strategy was invoked\n         * from a workbox `Route` object and the\n         * {@link workbox-routing~matchCallback} returned\n         * a truthy value (it will be that value).\n         * @name params\n         * @instance\n         * @type {*|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(options.event, ExtendableEvent, {\n                moduleName: 'workbox-strategies',\n                className: 'StrategyHandler',\n                funcName: 'constructor',\n                paramName: 'options.event',\n            });\n        }\n        Object.assign(this, options);\n        this.event = options.event;\n        this._strategy = strategy;\n        this._handlerDeferred = new Deferred();\n        this._extendLifetimePromises = [];\n        // Copy the plugins list (since it's mutable on the strategy),\n        // so any mutations don't affect this handler instance.\n        this._plugins = [...strategy.plugins];\n        this._pluginStateMap = new Map();\n        for (const plugin of this._plugins) {\n            this._pluginStateMap.set(plugin, {});\n        }\n        this.event.waitUntil(this._handlerDeferred.promise);\n    }\n    /**\n     * Fetches a given request (and invokes any applicable plugin callback\n     * methods) using the `fetchOptions` (for non-navigation requests) and\n     * `plugins` defined on the `Strategy` object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - `requestWillFetch()`\n     * - `fetchDidSucceed()`\n     * - `fetchDidFail()`\n     *\n     * @param {Request|string} input The URL or request to fetch.\n     * @return {Promise<Response>}\n     */\n    async fetch(input) {\n        const { event } = this;\n        let request = toRequest(input);\n        if (request.mode === 'navigate' &&\n            event instanceof FetchEvent &&\n            event.preloadResponse) {\n            const possiblePreloadResponse = (await event.preloadResponse);\n            if (possiblePreloadResponse) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Using a preloaded navigation response for ` +\n                        `'${getFriendlyURL(request.url)}'`);\n                }\n                return possiblePreloadResponse;\n            }\n        }\n        // If there is a fetchDidFail plugin, we need to save a clone of the\n        // original request before it's either modified by a requestWillFetch\n        // plugin or before the original request's body is consumed via fetch().\n        const originalRequest = this.hasCallback('fetchDidFail')\n            ? request.clone()\n            : null;\n        try {\n            for (const cb of this.iterateCallbacks('requestWillFetch')) {\n                request = await cb({ request: request.clone(), event });\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                throw new WorkboxError('plugin-error-request-will-fetch', {\n                    thrownErrorMessage: err.message,\n                });\n            }\n        }\n        // The request can be altered by plugins with `requestWillFetch` making\n        // the original request (most likely from a `fetch` event) different\n        // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n        const pluginFilteredRequest = request.clone();\n        try {\n            let fetchResponse;\n            // See https://github.com/GoogleChrome/workbox/issues/1796\n            fetchResponse = await fetch(request, request.mode === 'navigate' ? undefined : this._strategy.fetchOptions);\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' returned a response with ` +\n                    `status '${fetchResponse.status}'.`);\n            }\n            for (const callback of this.iterateCallbacks('fetchDidSucceed')) {\n                fetchResponse = await callback({\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse,\n                });\n            }\n            return fetchResponse;\n        }\n        catch (error) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' threw an error.`, error);\n            }\n            // `originalRequest` will only exist if a `fetchDidFail` callback\n            // is being used (see above).\n            if (originalRequest) {\n                await this.runCallbacks('fetchDidFail', {\n                    error: error,\n                    event,\n                    originalRequest: originalRequest.clone(),\n                    request: pluginFilteredRequest.clone(),\n                });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\n     * the response generated by `this.fetch()`.\n     *\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\n     * so you do not have to manually call `waitUntil()` on the event.\n     *\n     * @param {Request|string} input The request or URL to fetch and cache.\n     * @return {Promise<Response>}\n     */\n    async fetchAndCachePut(input) {\n        const response = await this.fetch(input);\n        const responseClone = response.clone();\n        void this.waitUntil(this.cachePut(input, responseClone));\n        return response;\n    }\n    /**\n     * Matches a request from the cache (and invokes any applicable plugin\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\n     * defined on the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cachedResponseWillByUsed()\n     *\n     * @param {Request|string} key The Request or URL to use as the cache key.\n     * @return {Promise<Response|undefined>} A matching response, if found.\n     */\n    async cacheMatch(key) {\n        const request = toRequest(key);\n        let cachedResponse;\n        const { cacheName, matchOptions } = this._strategy;\n        const effectiveRequest = await this.getCacheKey(request, 'read');\n        const multiMatchOptions = Object.assign(Object.assign({}, matchOptions), { cacheName });\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n        if (process.env.NODE_ENV !== 'production') {\n            if (cachedResponse) {\n                logger.debug(`Found a cached response in '${cacheName}'.`);\n            }\n            else {\n                logger.debug(`No cached response found in '${cacheName}'.`);\n            }\n        }\n        for (const callback of this.iterateCallbacks('cachedResponseWillBeUsed')) {\n            cachedResponse =\n                (await callback({\n                    cacheName,\n                    matchOptions,\n                    cachedResponse,\n                    request: effectiveRequest,\n                    event: this.event,\n                })) || undefined;\n        }\n        return cachedResponse;\n    }\n    /**\n     * Puts a request/response pair in the cache (and invokes any applicable\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\n     * the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cacheWillUpdate()\n     * - cacheDidUpdate()\n     *\n     * @param {Request|string} key The request or URL to use as the cache key.\n     * @param {Response} response The response to cache.\n     * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\n     * not be cached, and `true` otherwise.\n     */\n    async cachePut(key, response) {\n        const request = toRequest(key);\n        // Run in the next task to avoid blocking other cache reads.\n        // https://github.com/w3c/ServiceWorker/issues/1397\n        await timeout(0);\n        const effectiveRequest = await this.getCacheKey(request, 'write');\n        if (process.env.NODE_ENV !== 'production') {\n            if (effectiveRequest.method && effectiveRequest.method !== 'GET') {\n                throw new WorkboxError('attempt-to-cache-non-get-request', {\n                    url: getFriendlyURL(effectiveRequest.url),\n                    method: effectiveRequest.method,\n                });\n            }\n            // See https://github.com/GoogleChrome/workbox/issues/2818\n            const vary = response.headers.get('Vary');\n            if (vary) {\n                logger.debug(`The response for ${getFriendlyURL(effectiveRequest.url)} ` +\n                    `has a 'Vary: ${vary}' header. ` +\n                    `Consider setting the {ignoreVary: true} option on your strategy ` +\n                    `to ensure cache matching and deletion works as expected.`);\n            }\n        }\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.error(`Cannot cache non-existent response for ` +\n                    `'${getFriendlyURL(effectiveRequest.url)}'.`);\n            }\n            throw new WorkboxError('cache-put-with-no-response', {\n                url: getFriendlyURL(effectiveRequest.url),\n            });\n        }\n        const responseToCache = await this._ensureResponseSafeToCache(response);\n        if (!responseToCache) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' ` +\n                    `will not be cached.`, responseToCache);\n            }\n            return false;\n        }\n        const { cacheName, matchOptions } = this._strategy;\n        const cache = await self.caches.open(cacheName);\n        const hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\n        const oldResponse = hasCacheUpdateCallback\n            ? await cacheMatchIgnoreParams(\n            // TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n            // feature. Consider into ways to only add this behavior if using\n            // precaching.\n            cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions)\n            : null;\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Updating the '${cacheName}' cache with a new Response ` +\n                `for ${getFriendlyURL(effectiveRequest.url)}.`);\n        }\n        try {\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n                if (error.name === 'QuotaExceededError') {\n                    await executeQuotaErrorCallbacks();\n                }\n                throw error;\n            }\n        }\n        for (const callback of this.iterateCallbacks('cacheDidUpdate')) {\n            await callback({\n                cacheName,\n                oldResponse,\n                newResponse: responseToCache.clone(),\n                request: effectiveRequest,\n                event: this.event,\n            });\n        }\n        return true;\n    }\n    /**\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\n     * executes any of those callbacks found in sequence. The final `Request`\n     * object returned by the last plugin is treated as the cache key for cache\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\n     * been registered, the passed request is returned unmodified\n     *\n     * @param {Request} request\n     * @param {string} mode\n     * @return {Promise<Request>}\n     */\n    async getCacheKey(request, mode) {\n        const key = `${request.url} | ${mode}`;\n        if (!this._cacheKeys[key]) {\n            let effectiveRequest = request;\n            for (const callback of this.iterateCallbacks('cacheKeyWillBeUsed')) {\n                effectiveRequest = toRequest(await callback({\n                    mode,\n                    request: effectiveRequest,\n                    event: this.event,\n                    // params has a type any can't change right now.\n                    params: this.params, // eslint-disable-line\n                }));\n            }\n            this._cacheKeys[key] = effectiveRequest;\n        }\n        return this._cacheKeys[key];\n    }\n    /**\n     * Returns true if the strategy has at least one plugin with the given\n     * callback.\n     *\n     * @param {string} name The name of the callback to check for.\n     * @return {boolean}\n     */\n    hasCallback(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (name in plugin) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Runs all plugin callbacks matching the given name, in order, passing the\n     * given param object (merged ith the current plugin state) as the only\n     * argument.\n     *\n     * Note: since this method runs all plugins, it's not suitable for cases\n     * where the return value of a callback needs to be applied prior to calling\n     * the next callback. See\n     * {@link workbox-strategies.StrategyHandler#iterateCallbacks}\n     * below for how to handle that case.\n     *\n     * @param {string} name The name of the callback to run within each plugin.\n     * @param {Object} param The object to pass as the first (and only) param\n     *     when executing each callback. This object will be merged with the\n     *     current plugin state prior to callback execution.\n     */\n    async runCallbacks(name, param) {\n        for (const callback of this.iterateCallbacks(name)) {\n            // TODO(philipwalton): not sure why `any` is needed. It seems like\n            // this should work with `as WorkboxPluginCallbackParam[C]`.\n            await callback(param);\n        }\n    }\n    /**\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\n     * where each callback is wrapped with the current handler state (i.e. when\n     * you call each callback, whatever object parameter you pass it will\n     * be merged with the plugin's current state).\n     *\n     * @param {string} name The name fo the callback to run\n     * @return {Array<Function>}\n     */\n    *iterateCallbacks(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (typeof plugin[name] === 'function') {\n                const state = this._pluginStateMap.get(plugin);\n                const statefulCallback = (param) => {\n                    const statefulParam = Object.assign(Object.assign({}, param), { state });\n                    // TODO(philipwalton): not sure why `any` is needed. It seems like\n                    // this should work with `as WorkboxPluginCallbackParam[C]`.\n                    return plugin[name](statefulParam);\n                };\n                yield statefulCallback;\n            }\n        }\n    }\n    /**\n     * Adds a promise to the\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\n     * of the event event associated with the request being handled (usually a\n     * `FetchEvent`).\n     *\n     * Note: you can await\n     * {@link workbox-strategies.StrategyHandler~doneWaiting}\n     * to know when all added promises have settled.\n     *\n     * @param {Promise} promise A promise to add to the extend lifetime promises\n     *     of the event that triggered the request.\n     */\n    waitUntil(promise) {\n        this._extendLifetimePromises.push(promise);\n        return promise;\n    }\n    /**\n     * Returns a promise that resolves once all promises passed to\n     * {@link workbox-strategies.StrategyHandler~waitUntil}\n     * have settled.\n     *\n     * Note: any work done after `doneWaiting()` settles should be manually\n     * passed to an event's `waitUntil()` method (not this handler's\n     * `waitUntil()` method), otherwise the service worker thread my be killed\n     * prior to your work completing.\n     */\n    async doneWaiting() {\n        let promise;\n        while ((promise = this._extendLifetimePromises.shift())) {\n            await promise;\n        }\n    }\n    /**\n     * Stops running the strategy and immediately resolves any pending\n     * `waitUntil()` promises.\n     */\n    destroy() {\n        this._handlerDeferred.resolve(null);\n    }\n    /**\n     * This method will call cacheWillUpdate on the available plugins (or use\n     * status === 200) to determine if the Response is safe and valid to cache.\n     *\n     * @param {Request} options.request\n     * @param {Response} options.response\n     * @return {Promise<Response|undefined>}\n     *\n     * @private\n     */\n    async _ensureResponseSafeToCache(response) {\n        let responseToCache = response;\n        let pluginsUsed = false;\n        for (const callback of this.iterateCallbacks('cacheWillUpdate')) {\n            responseToCache =\n                (await callback({\n                    request: this.request,\n                    response: responseToCache,\n                    event: this.event,\n                })) || undefined;\n            pluginsUsed = true;\n            if (!responseToCache) {\n                break;\n            }\n        }\n        if (!pluginsUsed) {\n            if (responseToCache && responseToCache.status !== 200) {\n                responseToCache = undefined;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (responseToCache) {\n                    if (responseToCache.status !== 200) {\n                        if (responseToCache.status === 0) {\n                            logger.warn(`The response for '${this.request.url}' ` +\n                                `is an opaque response. The caching strategy that you're ` +\n                                `using will not cache opaque responses by default.`);\n                        }\n                        else {\n                            logger.debug(`The response for '${this.request.url}' ` +\n                                `returned a status code of '${response.status}' and won't ` +\n                                `be cached as a result.`);\n                        }\n                    }\n                }\n            }\n        }\n        return responseToCache;\n    }\n}\nexport { StrategyHandler };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}