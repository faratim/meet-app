{"ast":null,"code":"import _slicedToArray from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { registerQuotaErrorCallback } from 'workbox-core/registerQuotaErrorCallback.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { CacheExpiration } from './CacheExpiration.js';\nimport './_version.js';\n/**\n * This plugin can be used in a `workbox-strategy` to regularly enforce a\n * limit on the age and / or the number of cached requests.\n *\n * It can only be used with `workbox-strategy` instances that have a\n * [custom `cacheName` property set](/web/tools/workbox/guides/configure-workbox#custom_cache_names_in_strategies).\n * In other words, it can't be used to expire entries in strategy that uses the\n * default runtime cache name.\n *\n * Whenever a cached response is used or updated, this plugin will look\n * at the associated cache and remove any old or extra responses.\n *\n * When using `maxAgeSeconds`, responses may be used *once* after expiring\n * because the expiration clean up will not have occurred until *after* the\n * cached response has been used. If the response has a \"Date\" header, then\n * a light weight expiration check is performed and the response will not be\n * used immediately.\n *\n * When using `maxEntries`, the entry least-recently requested will be removed\n * from the cache first.\n *\n * @memberof workbox-expiration\n */\n\nvar ExpirationPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {ExpirationPluginOptions} config\n   * @param {number} [config.maxEntries] The maximum number of entries to cache.\n   * Entries used the least will be removed as the maximum is reached.\n   * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\n   * it's treated as stale and removed.\n   * @param {Object} [config.matchOptions] The [`CacheQueryOptions`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/delete#Parameters)\n   * that will be used when calling `delete()` on the cache.\n   * @param {boolean} [config.purgeOnQuotaError] Whether to opt this cache in to\n   * automatic deletion if the available storage quota has been exceeded.\n   */\n  function ExpirationPlugin() {\n    var _this = this;\n\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, ExpirationPlugin);\n\n    /**\n     * A \"lifecycle\" callback that will be triggered automatically by the\n     * `workbox-strategies` handlers when a `Response` is about to be returned\n     * from a [Cache](https://developer.mozilla.org/en-US/docs/Web/API/Cache) to\n     * the handler. It allows the `Response` to be inspected for freshness and\n     * prevents it from being used if the `Response`'s `Date` header value is\n     * older than the configured `maxAgeSeconds`.\n     *\n     * @param {Object} options\n     * @param {string} options.cacheName Name of the cache the response is in.\n     * @param {Response} options.cachedResponse The `Response` object that's been\n     *     read from a cache and whose freshness should be checked.\n     * @return {Response} Either the `cachedResponse`, if it's\n     *     fresh, or `null` if the `Response` is older than `maxAgeSeconds`.\n     *\n     * @private\n     */\n    this.cachedResponseWillBeUsed = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {\n        var event, request, cacheName, cachedResponse, isFresh, cacheExpiration, updateTimestampDone;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                event = _ref.event, request = _ref.request, cacheName = _ref.cacheName, cachedResponse = _ref.cachedResponse;\n\n                if (cachedResponse) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", null);\n\n              case 3:\n                isFresh = _this._isResponseDateFresh(cachedResponse); // Expire entries to ensure that even if the expiration date has\n                // expired, it'll only be used once.\n\n                cacheExpiration = _this._getCacheExpiration(cacheName);\n                dontWaitFor(cacheExpiration.expireEntries()); // Update the metadata for the request URL to the current timestamp,\n                // but don't `await` it as we don't want to block the response.\n\n                updateTimestampDone = cacheExpiration.updateTimestamp(request.url);\n\n                if (event) {\n                  try {\n                    event.waitUntil(updateTimestampDone);\n                  } catch (error) {\n                    if (process.env.NODE_ENV !== 'production') {\n                      // The event may not be a fetch event; only log the URL if it is.\n                      if ('request' in event) {\n                        logger.warn(\"Unable to ensure service worker stays alive when \" + \"updating cache entry for \" + \"'\".concat(getFriendlyURL(event.request.url), \"'.\"));\n                      }\n                    }\n                  }\n                }\n\n                return _context.abrupt(\"return\", isFresh ? cachedResponse : null);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    /**\n     * A \"lifecycle\" callback that will be triggered automatically by the\n     * `workbox-strategies` handlers when an entry is added to a cache.\n     *\n     * @param {Object} options\n     * @param {string} options.cacheName Name of the cache that was updated.\n     * @param {string} options.request The Request for the cached entry.\n     *\n     * @private\n     */\n\n\n    this.cacheDidUpdate = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref3) {\n        var cacheName, request, cacheExpiration;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                cacheName = _ref3.cacheName, request = _ref3.request;\n\n                if (process.env.NODE_ENV !== 'production') {\n                  assert.isType(cacheName, 'string', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'cacheDidUpdate',\n                    paramName: 'cacheName'\n                  });\n                  assert.isInstance(request, Request, {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'cacheDidUpdate',\n                    paramName: 'request'\n                  });\n                }\n\n                cacheExpiration = _this._getCacheExpiration(cacheName);\n                _context2.next = 5;\n                return cacheExpiration.updateTimestamp(request.url);\n\n              case 5:\n                _context2.next = 7;\n                return cacheExpiration.expireEntries();\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!(config.maxEntries || config.maxAgeSeconds)) {\n        throw new WorkboxError('max-entries-or-age-required', {\n          moduleName: 'workbox-expiration',\n          className: 'Plugin',\n          funcName: 'constructor'\n        });\n      }\n\n      if (config.maxEntries) {\n        assert.isType(config.maxEntries, 'number', {\n          moduleName: 'workbox-expiration',\n          className: 'Plugin',\n          funcName: 'constructor',\n          paramName: 'config.maxEntries'\n        });\n      }\n\n      if (config.maxAgeSeconds) {\n        assert.isType(config.maxAgeSeconds, 'number', {\n          moduleName: 'workbox-expiration',\n          className: 'Plugin',\n          funcName: 'constructor',\n          paramName: 'config.maxAgeSeconds'\n        });\n      }\n    }\n\n    this._config = config;\n    this._maxAgeSeconds = config.maxAgeSeconds;\n    this._cacheExpirations = new Map();\n\n    if (config.purgeOnQuotaError) {\n      registerQuotaErrorCallback(function () {\n        return _this.deleteCacheAndMetadata();\n      });\n    }\n  }\n  /**\n   * A simple helper method to return a CacheExpiration instance for a given\n   * cache name.\n   *\n   * @param {string} cacheName\n   * @return {CacheExpiration}\n   *\n   * @private\n   */\n\n\n  _createClass(ExpirationPlugin, [{\n    key: \"_getCacheExpiration\",\n    value: function _getCacheExpiration(cacheName) {\n      if (cacheName === cacheNames.getRuntimeName()) {\n        throw new WorkboxError('expire-custom-caches-only');\n      }\n\n      var cacheExpiration = this._cacheExpirations.get(cacheName);\n\n      if (!cacheExpiration) {\n        cacheExpiration = new CacheExpiration(cacheName, this._config);\n\n        this._cacheExpirations.set(cacheName, cacheExpiration);\n      }\n\n      return cacheExpiration;\n    }\n    /**\n     * @param {Response} cachedResponse\n     * @return {boolean}\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_isResponseDateFresh\",\n    value: function _isResponseDateFresh(cachedResponse) {\n      if (!this._maxAgeSeconds) {\n        // We aren't expiring by age, so return true, it's fresh\n        return true;\n      } // Check if the 'date' header will suffice a quick expiration check.\n      // See https://github.com/GoogleChromeLabs/sw-toolbox/issues/164 for\n      // discussion.\n\n\n      var dateHeaderTimestamp = this._getDateHeaderTimestamp(cachedResponse);\n\n      if (dateHeaderTimestamp === null) {\n        // Unable to parse date, so assume it's fresh.\n        return true;\n      } // If we have a valid headerTime, then our response is fresh iff the\n      // headerTime plus maxAgeSeconds is greater than the current time.\n\n\n      var now = Date.now();\n      return dateHeaderTimestamp >= now - this._maxAgeSeconds * 1000;\n    }\n    /**\n     * This method will extract the data header and parse it into a useful\n     * value.\n     *\n     * @param {Response} cachedResponse\n     * @return {number|null}\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_getDateHeaderTimestamp\",\n    value: function _getDateHeaderTimestamp(cachedResponse) {\n      if (!cachedResponse.headers.has('date')) {\n        return null;\n      }\n\n      var dateHeader = cachedResponse.headers.get('date');\n      var parsedDate = new Date(dateHeader);\n      var headerTime = parsedDate.getTime(); // If the Date header was invalid for some reason, parsedDate.getTime()\n      // will return NaN.\n\n      if (isNaN(headerTime)) {\n        return null;\n      }\n\n      return headerTime;\n    }\n    /**\n     * This is a helper method that performs two operations:\n     *\n     * - Deletes *all* the underlying Cache instances associated with this plugin\n     * instance, by calling caches.delete() on your behalf.\n     * - Deletes the metadata from IndexedDB used to keep track of expiration\n     * details for each Cache instance.\n     *\n     * When using cache expiration, calling this method is preferable to calling\n     * `caches.delete()` directly, since this will ensure that the IndexedDB\n     * metadata is also cleanly removed and open IndexedDB instances are deleted.\n     *\n     * Note that if you're *not* using cache expiration for a given cache, calling\n     * `caches.delete()` and passing in the cache's name should be sufficient.\n     * There is no Workbox-specific method needed for cleanup in that case.\n     */\n\n  }, {\n    key: \"deleteCacheAndMetadata\",\n    value: function () {\n      var _deleteCacheAndMetadata = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var _iterator, _step, _step$value, cacheName, cacheExpiration;\n\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                // Do this one at a time instead of all at once via `Promise.all()` to\n                // reduce the chance of inconsistency if a promise rejects.\n                _iterator = _createForOfIteratorHelper(this._cacheExpirations);\n                _context3.prev = 1;\n\n                _iterator.s();\n\n              case 3:\n                if ((_step = _iterator.n()).done) {\n                  _context3.next = 11;\n                  break;\n                }\n\n                _step$value = _slicedToArray(_step.value, 2), cacheName = _step$value[0], cacheExpiration = _step$value[1];\n                _context3.next = 7;\n                return self.caches.delete(cacheName);\n\n              case 7:\n                _context3.next = 9;\n                return cacheExpiration.delete();\n\n              case 9:\n                _context3.next = 3;\n                break;\n\n              case 11:\n                _context3.next = 16;\n                break;\n\n              case 13:\n                _context3.prev = 13;\n                _context3.t0 = _context3[\"catch\"](1);\n\n                _iterator.e(_context3.t0);\n\n              case 16:\n                _context3.prev = 16;\n\n                _iterator.f();\n\n                return _context3.finish(16);\n\n              case 19:\n                // Reset this._cacheExpirations to its initial state.\n                this._cacheExpirations = new Map();\n\n              case 20:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[1, 13, 16, 19]]);\n      }));\n\n      function deleteCacheAndMetadata() {\n        return _deleteCacheAndMetadata.apply(this, arguments);\n      }\n\n      return deleteCacheAndMetadata;\n    }()\n  }]);\n\n  return ExpirationPlugin;\n}();\n\nexport { ExpirationPlugin };","map":{"version":3,"names":["assert","cacheNames","dontWaitFor","getFriendlyURL","logger","registerQuotaErrorCallback","WorkboxError","CacheExpiration","ExpirationPlugin","config","cachedResponseWillBeUsed","event","request","cacheName","cachedResponse","isFresh","_isResponseDateFresh","cacheExpiration","_getCacheExpiration","expireEntries","updateTimestampDone","updateTimestamp","url","waitUntil","error","process","env","NODE_ENV","warn","cacheDidUpdate","isType","moduleName","className","funcName","paramName","isInstance","Request","maxEntries","maxAgeSeconds","_config","_maxAgeSeconds","_cacheExpirations","Map","purgeOnQuotaError","deleteCacheAndMetadata","getRuntimeName","get","set","dateHeaderTimestamp","_getDateHeaderTimestamp","now","Date","headers","has","dateHeader","parsedDate","headerTime","getTime","isNaN","self","caches","delete"],"sources":["/Users/faratim/Documents/GitHub/meet-app/meet/node_modules/workbox-expiration/ExpirationPlugin.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { registerQuotaErrorCallback } from 'workbox-core/registerQuotaErrorCallback.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { CacheExpiration } from './CacheExpiration.js';\nimport './_version.js';\n/**\n * This plugin can be used in a `workbox-strategy` to regularly enforce a\n * limit on the age and / or the number of cached requests.\n *\n * It can only be used with `workbox-strategy` instances that have a\n * [custom `cacheName` property set](/web/tools/workbox/guides/configure-workbox#custom_cache_names_in_strategies).\n * In other words, it can't be used to expire entries in strategy that uses the\n * default runtime cache name.\n *\n * Whenever a cached response is used or updated, this plugin will look\n * at the associated cache and remove any old or extra responses.\n *\n * When using `maxAgeSeconds`, responses may be used *once* after expiring\n * because the expiration clean up will not have occurred until *after* the\n * cached response has been used. If the response has a \"Date\" header, then\n * a light weight expiration check is performed and the response will not be\n * used immediately.\n *\n * When using `maxEntries`, the entry least-recently requested will be removed\n * from the cache first.\n *\n * @memberof workbox-expiration\n */\nclass ExpirationPlugin {\n    /**\n     * @param {ExpirationPluginOptions} config\n     * @param {number} [config.maxEntries] The maximum number of entries to cache.\n     * Entries used the least will be removed as the maximum is reached.\n     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\n     * it's treated as stale and removed.\n     * @param {Object} [config.matchOptions] The [`CacheQueryOptions`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/delete#Parameters)\n     * that will be used when calling `delete()` on the cache.\n     * @param {boolean} [config.purgeOnQuotaError] Whether to opt this cache in to\n     * automatic deletion if the available storage quota has been exceeded.\n     */\n    constructor(config = {}) {\n        /**\n         * A \"lifecycle\" callback that will be triggered automatically by the\n         * `workbox-strategies` handlers when a `Response` is about to be returned\n         * from a [Cache](https://developer.mozilla.org/en-US/docs/Web/API/Cache) to\n         * the handler. It allows the `Response` to be inspected for freshness and\n         * prevents it from being used if the `Response`'s `Date` header value is\n         * older than the configured `maxAgeSeconds`.\n         *\n         * @param {Object} options\n         * @param {string} options.cacheName Name of the cache the response is in.\n         * @param {Response} options.cachedResponse The `Response` object that's been\n         *     read from a cache and whose freshness should be checked.\n         * @return {Response} Either the `cachedResponse`, if it's\n         *     fresh, or `null` if the `Response` is older than `maxAgeSeconds`.\n         *\n         * @private\n         */\n        this.cachedResponseWillBeUsed = async ({ event, request, cacheName, cachedResponse, }) => {\n            if (!cachedResponse) {\n                return null;\n            }\n            const isFresh = this._isResponseDateFresh(cachedResponse);\n            // Expire entries to ensure that even if the expiration date has\n            // expired, it'll only be used once.\n            const cacheExpiration = this._getCacheExpiration(cacheName);\n            dontWaitFor(cacheExpiration.expireEntries());\n            // Update the metadata for the request URL to the current timestamp,\n            // but don't `await` it as we don't want to block the response.\n            const updateTimestampDone = cacheExpiration.updateTimestamp(request.url);\n            if (event) {\n                try {\n                    event.waitUntil(updateTimestampDone);\n                }\n                catch (error) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // The event may not be a fetch event; only log the URL if it is.\n                        if ('request' in event) {\n                            logger.warn(`Unable to ensure service worker stays alive when ` +\n                                `updating cache entry for ` +\n                                `'${getFriendlyURL(event.request.url)}'.`);\n                        }\n                    }\n                }\n            }\n            return isFresh ? cachedResponse : null;\n        };\n        /**\n         * A \"lifecycle\" callback that will be triggered automatically by the\n         * `workbox-strategies` handlers when an entry is added to a cache.\n         *\n         * @param {Object} options\n         * @param {string} options.cacheName Name of the cache that was updated.\n         * @param {string} options.request The Request for the cached entry.\n         *\n         * @private\n         */\n        this.cacheDidUpdate = async ({ cacheName, request, }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                assert.isType(cacheName, 'string', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'cacheDidUpdate',\n                    paramName: 'cacheName',\n                });\n                assert.isInstance(request, Request, {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'cacheDidUpdate',\n                    paramName: 'request',\n                });\n            }\n            const cacheExpiration = this._getCacheExpiration(cacheName);\n            await cacheExpiration.updateTimestamp(request.url);\n            await cacheExpiration.expireEntries();\n        };\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\n                throw new WorkboxError('max-entries-or-age-required', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.maxEntries) {\n                assert.isType(config.maxEntries, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                    paramName: 'config.maxEntries',\n                });\n            }\n            if (config.maxAgeSeconds) {\n                assert.isType(config.maxAgeSeconds, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                    paramName: 'config.maxAgeSeconds',\n                });\n            }\n        }\n        this._config = config;\n        this._maxAgeSeconds = config.maxAgeSeconds;\n        this._cacheExpirations = new Map();\n        if (config.purgeOnQuotaError) {\n            registerQuotaErrorCallback(() => this.deleteCacheAndMetadata());\n        }\n    }\n    /**\n     * A simple helper method to return a CacheExpiration instance for a given\n     * cache name.\n     *\n     * @param {string} cacheName\n     * @return {CacheExpiration}\n     *\n     * @private\n     */\n    _getCacheExpiration(cacheName) {\n        if (cacheName === cacheNames.getRuntimeName()) {\n            throw new WorkboxError('expire-custom-caches-only');\n        }\n        let cacheExpiration = this._cacheExpirations.get(cacheName);\n        if (!cacheExpiration) {\n            cacheExpiration = new CacheExpiration(cacheName, this._config);\n            this._cacheExpirations.set(cacheName, cacheExpiration);\n        }\n        return cacheExpiration;\n    }\n    /**\n     * @param {Response} cachedResponse\n     * @return {boolean}\n     *\n     * @private\n     */\n    _isResponseDateFresh(cachedResponse) {\n        if (!this._maxAgeSeconds) {\n            // We aren't expiring by age, so return true, it's fresh\n            return true;\n        }\n        // Check if the 'date' header will suffice a quick expiration check.\n        // See https://github.com/GoogleChromeLabs/sw-toolbox/issues/164 for\n        // discussion.\n        const dateHeaderTimestamp = this._getDateHeaderTimestamp(cachedResponse);\n        if (dateHeaderTimestamp === null) {\n            // Unable to parse date, so assume it's fresh.\n            return true;\n        }\n        // If we have a valid headerTime, then our response is fresh iff the\n        // headerTime plus maxAgeSeconds is greater than the current time.\n        const now = Date.now();\n        return dateHeaderTimestamp >= now - this._maxAgeSeconds * 1000;\n    }\n    /**\n     * This method will extract the data header and parse it into a useful\n     * value.\n     *\n     * @param {Response} cachedResponse\n     * @return {number|null}\n     *\n     * @private\n     */\n    _getDateHeaderTimestamp(cachedResponse) {\n        if (!cachedResponse.headers.has('date')) {\n            return null;\n        }\n        const dateHeader = cachedResponse.headers.get('date');\n        const parsedDate = new Date(dateHeader);\n        const headerTime = parsedDate.getTime();\n        // If the Date header was invalid for some reason, parsedDate.getTime()\n        // will return NaN.\n        if (isNaN(headerTime)) {\n            return null;\n        }\n        return headerTime;\n    }\n    /**\n     * This is a helper method that performs two operations:\n     *\n     * - Deletes *all* the underlying Cache instances associated with this plugin\n     * instance, by calling caches.delete() on your behalf.\n     * - Deletes the metadata from IndexedDB used to keep track of expiration\n     * details for each Cache instance.\n     *\n     * When using cache expiration, calling this method is preferable to calling\n     * `caches.delete()` directly, since this will ensure that the IndexedDB\n     * metadata is also cleanly removed and open IndexedDB instances are deleted.\n     *\n     * Note that if you're *not* using cache expiration for a given cache, calling\n     * `caches.delete()` and passing in the cache's name should be sufficient.\n     * There is no Workbox-specific method needed for cleanup in that case.\n     */\n    async deleteCacheAndMetadata() {\n        // Do this one at a time instead of all at once via `Promise.all()` to\n        // reduce the chance of inconsistency if a promise rejects.\n        for (const [cacheName, cacheExpiration] of this._cacheExpirations) {\n            await self.caches.delete(cacheName);\n            await cacheExpiration.delete();\n        }\n        // Reset this._cacheExpirations to its initial state.\n        this._cacheExpirations = new Map();\n    }\n}\nexport { ExpirationPlugin };\n"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,iCAAvB;AACA,SAASC,UAAT,QAA2B,qCAA3B;AACA,SAASC,WAAT,QAA4B,sCAA5B;AACA,SAASC,cAAT,QAA+B,yCAA/B;AACA,SAASC,MAAT,QAAuB,iCAAvB;AACA,SAASC,0BAAT,QAA2C,4CAA3C;AACA,SAASC,YAAT,QAA6B,uCAA7B;AACA,SAASC,eAAT,QAAgC,sBAAhC;AACA,OAAO,eAAP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,gB;EACF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,4BAAyB;IAAA;;IAAA,IAAbC,MAAa,uEAAJ,EAAI;;IAAA;;IACrB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,KAAKC,wBAAL;MAAA,uEAAgC;QAAA;QAAA;UAAA;YAAA;cAAA;gBAASC,KAAT,QAASA,KAAT,EAAgBC,OAAhB,QAAgBA,OAAhB,EAAyBC,SAAzB,QAAyBA,SAAzB,EAAoCC,cAApC,QAAoCA,cAApC;;gBAAA,IACvBA,cADuB;kBAAA;kBAAA;gBAAA;;gBAAA,iCAEjB,IAFiB;;cAAA;gBAItBC,OAJsB,GAIZ,KAAI,CAACC,oBAAL,CAA0BF,cAA1B,CAJY,EAK5B;gBACA;;gBACMG,eAPsB,GAOJ,KAAI,CAACC,mBAAL,CAAyBL,SAAzB,CAPI;gBAQ5BX,WAAW,CAACe,eAAe,CAACE,aAAhB,EAAD,CAAX,CAR4B,CAS5B;gBACA;;gBACMC,mBAXsB,GAWAH,eAAe,CAACI,eAAhB,CAAgCT,OAAO,CAACU,GAAxC,CAXA;;gBAY5B,IAAIX,KAAJ,EAAW;kBACP,IAAI;oBACAA,KAAK,CAACY,SAAN,CAAgBH,mBAAhB;kBACH,CAFD,CAGA,OAAOI,KAAP,EAAc;oBACV,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;sBACvC;sBACA,IAAI,aAAahB,KAAjB,EAAwB;wBACpBP,MAAM,CAACwB,IAAP,CAAY,+FAEJzB,cAAc,CAACQ,KAAK,CAACC,OAAN,CAAcU,GAAf,CAFV,OAAZ;sBAGH;oBACJ;kBACJ;gBACJ;;gBA1B2B,iCA2BrBP,OAAO,GAAGD,cAAH,GAAoB,IA3BN;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAhC;;MAAA;QAAA;MAAA;IAAA;IA6BA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACQ,KAAKe,cAAL;MAAA,uEAAsB;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAShB,SAAT,SAASA,SAAT,EAAoBD,OAApB,SAAoBA,OAApB;;gBAClB,IAAIa,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;kBACvC3B,MAAM,CAAC8B,MAAP,CAAcjB,SAAd,EAAyB,QAAzB,EAAmC;oBAC/BkB,UAAU,EAAE,oBADmB;oBAE/BC,SAAS,EAAE,QAFoB;oBAG/BC,QAAQ,EAAE,gBAHqB;oBAI/BC,SAAS,EAAE;kBAJoB,CAAnC;kBAMAlC,MAAM,CAACmC,UAAP,CAAkBvB,OAAlB,EAA2BwB,OAA3B,EAAoC;oBAChCL,UAAU,EAAE,oBADoB;oBAEhCC,SAAS,EAAE,QAFqB;oBAGhCC,QAAQ,EAAE,gBAHsB;oBAIhCC,SAAS,EAAE;kBAJqB,CAApC;gBAMH;;gBACKjB,eAfY,GAeM,KAAI,CAACC,mBAAL,CAAyBL,SAAzB,CAfN;gBAAA;gBAAA,OAgBZI,eAAe,CAACI,eAAhB,CAAgCT,OAAO,CAACU,GAAxC,CAhBY;;cAAA;gBAAA;gBAAA,OAiBZL,eAAe,CAACE,aAAhB,EAjBY;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAtB;;MAAA;QAAA;MAAA;IAAA;;IAmBA,IAAIM,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;MACvC,IAAI,EAAElB,MAAM,CAAC4B,UAAP,IAAqB5B,MAAM,CAAC6B,aAA9B,CAAJ,EAAkD;QAC9C,MAAM,IAAIhC,YAAJ,CAAiB,6BAAjB,EAAgD;UAClDyB,UAAU,EAAE,oBADsC;UAElDC,SAAS,EAAE,QAFuC;UAGlDC,QAAQ,EAAE;QAHwC,CAAhD,CAAN;MAKH;;MACD,IAAIxB,MAAM,CAAC4B,UAAX,EAAuB;QACnBrC,MAAM,CAAC8B,MAAP,CAAcrB,MAAM,CAAC4B,UAArB,EAAiC,QAAjC,EAA2C;UACvCN,UAAU,EAAE,oBAD2B;UAEvCC,SAAS,EAAE,QAF4B;UAGvCC,QAAQ,EAAE,aAH6B;UAIvCC,SAAS,EAAE;QAJ4B,CAA3C;MAMH;;MACD,IAAIzB,MAAM,CAAC6B,aAAX,EAA0B;QACtBtC,MAAM,CAAC8B,MAAP,CAAcrB,MAAM,CAAC6B,aAArB,EAAoC,QAApC,EAA8C;UAC1CP,UAAU,EAAE,oBAD8B;UAE1CC,SAAS,EAAE,QAF+B;UAG1CC,QAAQ,EAAE,aAHgC;UAI1CC,SAAS,EAAE;QAJ+B,CAA9C;MAMH;IACJ;;IACD,KAAKK,OAAL,GAAe9B,MAAf;IACA,KAAK+B,cAAL,GAAsB/B,MAAM,CAAC6B,aAA7B;IACA,KAAKG,iBAAL,GAAyB,IAAIC,GAAJ,EAAzB;;IACA,IAAIjC,MAAM,CAACkC,iBAAX,EAA8B;MAC1BtC,0BAA0B,CAAC;QAAA,OAAM,KAAI,CAACuC,sBAAL,EAAN;MAAA,CAAD,CAA1B;IACH;EACJ;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;WACI,6BAAoB/B,SAApB,EAA+B;MAC3B,IAAIA,SAAS,KAAKZ,UAAU,CAAC4C,cAAX,EAAlB,EAA+C;QAC3C,MAAM,IAAIvC,YAAJ,CAAiB,2BAAjB,CAAN;MACH;;MACD,IAAIW,eAAe,GAAG,KAAKwB,iBAAL,CAAuBK,GAAvB,CAA2BjC,SAA3B,CAAtB;;MACA,IAAI,CAACI,eAAL,EAAsB;QAClBA,eAAe,GAAG,IAAIV,eAAJ,CAAoBM,SAApB,EAA+B,KAAK0B,OAApC,CAAlB;;QACA,KAAKE,iBAAL,CAAuBM,GAAvB,CAA2BlC,SAA3B,EAAsCI,eAAtC;MACH;;MACD,OAAOA,eAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,8BAAqBH,cAArB,EAAqC;MACjC,IAAI,CAAC,KAAK0B,cAAV,EAA0B;QACtB;QACA,OAAO,IAAP;MACH,CAJgC,CAKjC;MACA;MACA;;;MACA,IAAMQ,mBAAmB,GAAG,KAAKC,uBAAL,CAA6BnC,cAA7B,CAA5B;;MACA,IAAIkC,mBAAmB,KAAK,IAA5B,EAAkC;QAC9B;QACA,OAAO,IAAP;MACH,CAZgC,CAajC;MACA;;;MACA,IAAME,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;MACA,OAAOF,mBAAmB,IAAIE,GAAG,GAAG,KAAKV,cAAL,GAAsB,IAA1D;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,iCAAwB1B,cAAxB,EAAwC;MACpC,IAAI,CAACA,cAAc,CAACsC,OAAf,CAAuBC,GAAvB,CAA2B,MAA3B,CAAL,EAAyC;QACrC,OAAO,IAAP;MACH;;MACD,IAAMC,UAAU,GAAGxC,cAAc,CAACsC,OAAf,CAAuBN,GAAvB,CAA2B,MAA3B,CAAnB;MACA,IAAMS,UAAU,GAAG,IAAIJ,IAAJ,CAASG,UAAT,CAAnB;MACA,IAAME,UAAU,GAAGD,UAAU,CAACE,OAAX,EAAnB,CANoC,CAOpC;MACA;;MACA,IAAIC,KAAK,CAACF,UAAD,CAAT,EAAuB;QACnB,OAAO,IAAP;MACH;;MACD,OAAOA,UAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;+FACI;QAAA;;QAAA;UAAA;YAAA;cAAA;gBACI;gBACA;gBAFJ,uCAG+C,KAAKf,iBAHpD;gBAAA;;gBAAA;;cAAA;gBAAA;kBAAA;kBAAA;gBAAA;;gBAAA,8CAGgB5B,SAHhB,mBAG2BI,eAH3B;gBAAA;gBAAA,OAIc0C,IAAI,CAACC,MAAL,CAAYC,MAAZ,CAAmBhD,SAAnB,CAJd;;cAAA;gBAAA;gBAAA,OAKcI,eAAe,CAAC4C,MAAhB,EALd;;cAAA;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA;;gBAAA;;cAAA;gBAAA;;gBAAA;;gBAAA;;cAAA;gBAOI;gBACA,KAAKpB,iBAAL,GAAyB,IAAIC,GAAJ,EAAzB;;cARJ;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;;;;;;AAWJ,SAASlC,gBAAT"},"metadata":{},"sourceType":"module"}